# Pre-commit hooks for CSA Docs project
# See https://pre-commit.com for more information

repos:
  # General file formatting and checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: trailing-whitespace
        args: [--markdown-linebreak-ext=md]
      - id: end-of-file-fixer
      - id: check-yaml
        args: [--unsafe]  # Allow custom YAML tags
      - id: check-json
      - id: check-toml
      - id: check-xml
      - id: check-merge-conflict
      - id: check-case-conflict
      - id: check-symlinks
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable
      - id: fix-byte-order-marker
      - id: mixed-line-ending
      - id: check-docstring-first
      - id: debug-statements
      - id: check-ast

  # Python formatting and linting
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.1.6
    hooks:
      - id: ruff
        args: [--fix, --exit-non-zero-on-fix]
      - id: ruff-format

  # Import sorting
  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        args: ["--profile", "black"]

  # Type checking
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.7.0
    hooks:
      - id: mypy
        additional_dependencies: 
          - types-PyYAML
          - types-requests
          - types-aiofiles
        args: [--ignore-missing-imports, --no-strict-optional]
        files: ^src/

  # Security scanning
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: ["-c", "pyproject.toml"]
        additional_dependencies: ["bandit[toml]"]
        files: ^src/

  # Markdown linting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.37.0
    hooks:
      - id: markdownlint
        args: [--config, .markdownlint.json]
        files: \.(md|markdown)$

  # Documentation quality checks
  - repo: local
    hooks:
      - id: test-documentation-build
        name: Test MkDocs Build
        entry: mkdocs
        args: [build, --strict]
        language: python
        files: ^(mkdocs\.yml|docs/.*)$
        pass_filenames: false
        additional_dependencies:
          - mkdocs==1.5.3
          - mkdocs-material==9.4.6
          - mkdocs-minify-plugin==0.7.1
          - pymdown-extensions==10.3

      - id: markdown-quality-check
        name: Markdown Quality Check
        entry: python
        args: 
          - -c
          - |
            from src.csa_docs_tools import MarkdownQualityChecker
            from pathlib import Path
            import sys
            
            checker = MarkdownQualityChecker(Path('.'))
            results = checker.check_all_files()
            report = checker.generate_quality_report(results)
            
            print(f'Markdown Quality Score: {report["quality_score"]:.1f}/100')
            if report['quality_score'] < 80:
                print(f'Quality score too low! Found {report["total_issues"]} issues.')
                sys.exit(1)
        language: python
        files: \.(md|markdown)$
        pass_filenames: false
        additional_dependencies:
          - PyYAML>=6.0.1

      - id: image-reference-check
        name: Image Reference Validation
        entry: python
        args:
          - -c
          - |
            from src.csa_docs_tools import ImageReferenceValidator
            from pathlib import Path
            import sys
            
            validator = ImageReferenceValidator(Path('.'))
            results = validator.validate_all_images()
            report = validator.generate_image_report(results)
            
            error_count = sum(1 for issues in results.values() for issue in issues if issue.severity == 'error')
            if error_count > 0:
                print(f'Found {error_count} image errors!')
                for file_path, issues in results.items():
                    for issue in issues[:3]:  # Show first 3 per file
                        if issue.severity == 'error':
                            print(f'  {issue.message} in {file_path}')
                sys.exit(1)
            
            print(f'Image validation passed. Health score: {report["image_health_score"]:.1f}/100')
        language: python
        files: \.(md|markdown|png|jpg|jpeg|gif|svg|webp)$
        pass_filenames: false
        additional_dependencies:
          - Pillow>=10.0.0

      - id: navigation-structure-check
        name: Navigation Structure Validation
        entry: python
        args:
          - -c
          - |
            from src.csa_docs_tools import NavigationStructureValidator
            from pathlib import Path
            import sys
            
            validator = NavigationStructureValidator(Path('.'))
            results = validator.validate_all_navigation()
            report = validator.generate_navigation_report(results)
            
            error_count = sum(len(issues) for issues in results.values() if any(i.severity == 'error' for i in issues))
            if error_count > 0:
                print(f'Found {error_count} navigation errors!')
                for category, issues in results.items():
                    for issue in issues[:2]:  # Show first 2 per category
                        if issue.severity == 'error':
                            print(f'  {issue.message}')
                sys.exit(1)
            
            print(f'Navigation validation passed. Health score: {report["navigation_health_score"]:.1f}/100')
        language: python
        files: ^(mkdocs\.yml|docs/.*)$
        pass_filenames: false
        additional_dependencies:
          - PyYAML>=6.0.1

      - id: link-validation-internal
        name: Internal Link Validation
        entry: python
        args:
          - -c
          - |
            import asyncio
            from src.csa_docs_tools import LinkValidator  
            from pathlib import Path
            import sys
            
            async def validate():
                async with LinkValidator(Path('.')) as validator:
                    results = await validator.validate_all_links(check_external=False)
                    broken = validator.get_broken_links(results)
                    
                    if broken:
                        print(f'Found {len(broken)} broken internal links!')
                        for link in broken[:5]:  # Show first 5
                            print(f'  {link.url} in {link.source_file}:{link.line_number}')
                        sys.exit(1)
                    
                    print(f'Internal link validation passed. {len(results)} links checked.')
            
            asyncio.run(validate())
        language: python
        files: \.(md|markdown)$
        pass_filenames: false
        additional_dependencies:
          - aiohttp>=3.8.0

  # Commit message formatting
  - repo: https://github.com/compilerla/conventional-pre-commit
    rev: v3.0.0
    hooks:
      - id: conventional-pre-commit
        stages: [commit-msg]

  # Additional file checks
  - repo: https://github.com/pre-commit/pygrep-hooks
    rev: v1.10.0
    hooks:
      - id: python-check-blanket-noqa
      - id: python-check-blanket-type-ignore
      - id: python-no-log-warn
      - id: python-use-type-annotations
      - id: rst-backticks
      - id: rst-directive-colons
      - id: rst-inline-touching-normal

  # YAML formatting
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v3.0.3
    hooks:
      - id: prettier
        types_or: [yaml, markdown, json]
        exclude: ^(\.markdownlint\.json)$

# Configuration
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit.com hooks
    
    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: []
  submodules: false