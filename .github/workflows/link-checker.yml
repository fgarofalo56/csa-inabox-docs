name: Link Checker

on:
  # Run on push to main branch
  push:
    branches: [main]
    paths:
      - 'docs/**/*.md'
      - 'README.md'
  # Run on pull requests
  pull_request:
    branches: [main]
    paths:
      - 'docs/**/*.md'
      - 'README.md'
  # Run on a schedule (weekly on Monday at 9:00 AM)
  schedule:
    - cron: '0 9 * * 1'
  # Allow manual triggering
  workflow_dispatch:

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  check-links:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Fetch all history for proper link checking
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'  # Using more recent Python
          cache: 'pip'  # Enable pip caching
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
          pip install colorama  # For better console output
          
      - name: Debug environment
        run: |
          echo "GitHub workspace: $GITHUB_WORKSPACE"
          echo "Link checker path: $(realpath project_tracking/tools/link_checker.py)"
          echo "Directory structure:"
          find . -type d -not -path "*/\.*" | sort
          
      - name: Verify link checker script exists
        run: |
          if [ ! -f "project_tracking/tools/link_checker.py" ]; then
            echo "❌ ERROR: Link checker script not found!"
            exit 1
          else
            echo "✅ Link checker script found."
            echo "Script content:"
            head -n 20 project_tracking/tools/link_checker.py
          fi
          
      - name: Run link checker with detailed logging
        id: run_checker
        run: |
          echo "Running link checker..."
          python -c "import sys; print(f'Python version: {sys.version}')"
          python project_tracking/tools/link_checker.py . 2>&1 | tee link_checker_output.log
          EXIT_CODE=${PIPESTATUS[0]}
          echo "Link checker exit code: $EXIT_CODE"
          
          # Save the exit code for later steps
          echo "checker_exit_code=$EXIT_CODE" >> $GITHUB_OUTPUT
          
      - name: Capture link checker output
        if: always()
        run: |
          if [ -f "link_checker_output.log" ]; then
            echo "Link checker log contents:"
            cat link_checker_output.log
          else
            echo "No link checker output log found."
          fi
          
      - name: Upload link check report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: link-check-report
          path: |
            project_tracking/planning/link_check_report.md
            link_checker_output.log
          
      - name: Create or update issue on broken links
        if: steps.run_checker.outputs.checker_exit_code != '0'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            // Read the link check report
            let reportContent = '';
            try {
              reportContent = fs.readFileSync('project_tracking/planning/link_check_report.md', 'utf8');
            } catch (error) {
              console.error(`Error reading report file: ${error.message}`);
              reportContent = '⚠️ **Error reading link check report file.** Please check the workflow logs for details.';
            }
            
            // Read the full log output for debugging info
            let logOutput = '';
            try {
              logOutput = fs.readFileSync('link_checker_output.log', 'utf8');
            } catch (error) {
              console.error(`Error reading log file: ${error.message}`);
            }
            
            const debugInfo = `
            ## Debug Information
            \`\`\`
            ${logOutput.substring(0, 1500)}... (truncated)
            \`\`\`
            `;
            
            // Search for existing open issues about broken links
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: ['broken-links']
            });
            
            const issueTitle = '🔗 Broken Links Detected';
            const issueBody = `## Broken Links Report\n\nThe link checker has detected broken links in the documentation.\n\n${reportContent}\n\n### How to Fix\n\n1. Check if the linked files or URLs exist\n2. Update or remove broken links\n3. For external links, ensure they are still valid\n\n${debugInfo}\n\nPlease fix these links to ensure documentation integrity.`;
            
            if (issues.length > 0) {
              // Update existing issue
              const issue = issues[0];
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: issueBody
              });
              console.log(`Updated existing issue #${issue.number}`);
            } else {
              // Create new issue
              const { data: newIssue } = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: issueBody,
                labels: ['broken-links', 'documentation', 'bug']
              });
              console.log(`Created new issue #${newIssue.number}`);
            }
            
      - name: Run link checker for diagnostics
        if: failure()
        run: |
          echo "Running link checker in debug mode..."
          python -c "
          import sys, os
          print(f'Python version: {sys.version}')
          print(f'Current directory: {os.getcwd()}')
          print('Files in project_tracking/tools:')
          try:
              print(os.listdir('project_tracking/tools'))
          except Exception as e:
              print(f'Error listing directory: {str(e)}')
          "
