{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Azure Synapse Analytics Documentation","text":"<p>Welcome to the comprehensive documentation for Azure Synapse Analytics, focusing on Spark Delta Lakehouse and Serverless SQL features.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Azure Synapse Analytics is an enterprise analytics service that accelerates time to insight across data warehouses and big data systems. This documentation provides guidance, best practices, and technical references for implementing and optimizing Azure Synapse Analytics solutions.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Delta Lakehouse Architecture: Learn about implementing the Delta Lakehouse pattern with Azure Synapse Analytics</li> <li>Serverless SQL: Understand how to leverage serverless SQL pools for cost-effective data exploration</li> <li>Shared Metadata: Explore the capabilities of sharing metadata between different services in Synapse</li> </ul>"},{"location":"#documentation-sections","title":"Documentation Sections","text":"Section Description Architecture Detailed architectural patterns and implementation guides Best Practices Recommendations for performance, security, cost optimization, and governance Code Examples Sample code and implementation templates Reference API references and technical specifications FAQ Frequently asked questions Troubleshooting Common issues and solutions"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>Delta Lakehouse Overview</li> <li>Serverless SQL Guide</li> <li>Shared Metadata Documentation</li> <li>Performance Best Practices</li> <li>Security Guidelines</li> </ul>"},{"location":"#latest-updates","title":"Latest Updates","text":"<ul> <li>Added comprehensive FAQ section</li> <li>Improved navigation with breadcrumbs and related content</li> <li>Added versioned documentation support</li> <li>Enhanced search functionality</li> </ul>"},{"location":"faq/","title":"Frequently Asked Questions","text":""},{"location":"faq/#general-questions","title":"General Questions","text":""},{"location":"faq/#what-is-azure-synapse-analytics","title":"What is Azure Synapse Analytics?","text":"<p>Azure Synapse Analytics is an integrated analytics service that brings together data integration, enterprise data warehousing, and big data analytics. It gives you the freedom to query data on your terms, using either serverless or dedicated resources at scale.</p>"},{"location":"faq/#how-does-synapse-analytics-differ-from-azure-sql-data-warehouse","title":"How does Synapse Analytics differ from Azure SQL Data Warehouse?","text":"<p>Azure Synapse Analytics evolved from Azure SQL Data Warehouse, offering all its capabilities plus additional features including integrated Apache Spark, serverless SQL pools, data integration pipelines, and unified management.</p>"},{"location":"faq/#what-are-the-main-components-of-azure-synapse-analytics","title":"What are the main components of Azure Synapse Analytics?","text":"<ul> <li>SQL pools (dedicated and serverless)</li> <li>Apache Spark pools</li> <li>Data integration pipelines</li> <li>Studio (web-based interface)</li> <li>Synapse Link for near real-time analytics</li> </ul>"},{"location":"faq/#delta-lakehouse-questions","title":"Delta Lakehouse Questions","text":""},{"location":"faq/#what-is-a-delta-lakehouse","title":"What is a Delta Lakehouse?","text":"<p>A Delta Lakehouse combines the best features of data lakes and data warehouses, using Delta Lake format to provide ACID transactions, schema enforcement, and time travel capabilities on top of your data lake storage.</p>"},{"location":"faq/#what-are-the-advantages-of-using-delta-lake-format","title":"What are the advantages of using Delta Lake format?","text":"<ul> <li>ACID transactions</li> <li>Schema enforcement and evolution</li> <li>Time travel (data versioning)</li> <li>Support for batch and streaming data</li> <li>Improved query performance with optimized file layout and indexing</li> </ul>"},{"location":"faq/#how-do-i-optimize-performance-with-delta-lake-in-synapse","title":"How do I optimize performance with Delta Lake in Synapse?","text":"<ul> <li>Use Z-ordering for frequently queried columns</li> <li>Implement regular OPTIMIZE commands to compact small files</li> <li>Configure auto-optimize settings for tables with frequent updates</li> <li>Use partitioning for large tables that are queried by partition columns</li> </ul>"},{"location":"faq/#serverless-sql-questions","title":"Serverless SQL Questions","text":""},{"location":"faq/#what-is-a-serverless-sql-pool","title":"What is a Serverless SQL pool?","text":"<p>A Serverless SQL pool is an on-demand, scalable compute service that enables you to run SQL queries on data stored in your data lake without the need to provision or manage infrastructure.</p>"},{"location":"faq/#what-are-the-cost-benefits-of-serverless-sql","title":"What are the cost benefits of Serverless SQL?","text":"<p>Serverless SQL pools use a pay-per-query model where you're charged based on the data processed rather than provisioned compute resources, making it cost-effective for intermittent or unpredictable workloads.</p>"},{"location":"faq/#what-file-formats-are-supported-by-serverless-sql","title":"What file formats are supported by Serverless SQL?","text":"<ul> <li>Parquet</li> <li>CSV</li> <li>JSON</li> <li>Delta Lake (using OPENROWSET with Parquet)</li> </ul>"},{"location":"faq/#shared-metadata-questions","title":"Shared Metadata Questions","text":""},{"location":"faq/#how-does-shared-metadata-work-between-spark-and-sql-in-synapse","title":"How does shared metadata work between Spark and SQL in Synapse?","text":"<p>Azure Synapse Analytics uses a shared metadata model where tables created in Spark can be directly accessed from SQL pools without moving or copying data, using a common metadata store.</p>"},{"location":"faq/#what-are-the-limitations-of-shared-metadata","title":"What are the limitations of shared metadata?","text":"<ul> <li>Some data types may have compatibility issues between Spark and SQL</li> <li>Three-part naming has specific limitations in both environments</li> <li>Some advanced Spark DataFrame operations may not translate directly to SQL</li> </ul>"},{"location":"faq/#can-i-create-views-that-work-across-both-spark-and-sql","title":"Can I create views that work across both Spark and SQL?","text":"<p>Yes, you can create views that can be accessed from both environments, but you need to ensure compatible data types and follow naming conventions that work in both contexts.</p>"},{"location":"troubleshooting/","title":"Troubleshooting Guide","text":"<p>This guide covers common issues and solutions when working with Azure Synapse Analytics.</p>"},{"location":"troubleshooting/#connection-issues","title":"Connection Issues","text":""},{"location":"troubleshooting/#cannot-connect-to-synapse-workspace","title":"Cannot connect to Synapse workspace","text":"<p>Symptoms: Unable to access Synapse Studio or connect to the workspace.</p> <p>Possible Causes and Solutions:</p> <ol> <li>Network Connectivity:</li> <li>Ensure your network allows connections to the Azure Synapse service endpoints</li> <li>Check if firewall rules are properly configured in the Azure portal</li> <li> <p>Verify you're using the correct workspace URL</p> </li> <li> <p>Authentication Issues:</p> </li> <li>Confirm you have the appropriate permissions to access the workspace</li> <li>Check if your Azure Active Directory credentials are valid</li> <li> <p>Try signing out and signing back in to refresh authentication tokens</p> </li> <li> <p>Service Outage:</p> </li> <li>Check the Azure Status page for any ongoing service issues</li> </ol>"},{"location":"troubleshooting/#performance-problems","title":"Performance Problems","text":""},{"location":"troubleshooting/#slow-query-performance-in-dedicated-sql-pools","title":"Slow Query Performance in Dedicated SQL Pools","text":"<p>Symptoms: Queries take longer than expected to complete.</p> <p>Possible Causes and Solutions:</p> <ol> <li>Suboptimal Distribution:</li> <li>Verify table distribution keys are appropriate for common query patterns</li> <li>Check for data skew using <code>DBCC PDW_SHOWSPACEUSED</code></li> <li> <p>Consider redistributing tables with high skew</p> </li> <li> <p>Statistics Issues:</p> </li> <li>Ensure statistics are up-to-date using <code>UPDATE STATISTICS</code></li> <li> <p>Check for missing statistics in execution plans</p> </li> <li> <p>Resource Constraints:</p> </li> <li>Monitor resource utilization during query execution</li> <li>Consider scaling up the SQL pool during peak workloads</li> <li>Implement query concurrency management</li> </ol>"},{"location":"troubleshooting/#spark-jobs-failing-or-running-slowly","title":"Spark Jobs Failing or Running Slowly","text":"<p>Symptoms: Spark notebooks or jobs time out, fail, or perform poorly.</p> <p>Possible Causes and Solutions:</p> <ol> <li>Resource Allocation:</li> <li>Check if the Spark pool has sufficient memory and cores</li> <li>Monitor executor memory usage and adjust configurations</li> <li> <p>Consider increasing the executor count for large datasets</p> </li> <li> <p>Data Skew:</p> </li> <li>Inspect the Spark UI for task skew</li> <li>Use appropriate partitioning strategies to balance data</li> <li> <p>Implement salting for join operations on skewed keys</p> </li> <li> <p>Code Optimization:</p> </li> <li>Review and optimize transformations (prefer narrow over wide)</li> <li>Tune caching strategies for frequently accessed DataFrames</li> <li>Use appropriate file formats (Parquet, Delta) and compression</li> </ol>"},{"location":"troubleshooting/#delta-lake-issues","title":"Delta Lake Issues","text":""},{"location":"troubleshooting/#delta-lake-transaction-conflicts","title":"Delta Lake Transaction Conflicts","text":"<p>Symptoms: Transaction conflicts when multiple writers update the same Delta table.</p> <p>Possible Causes and Solutions:</p> <ol> <li>Concurrent Writers:</li> <li>Implement optimistic concurrency control with retry logic</li> <li>Consider using Delta Lake's optimistic concurrency control features</li> <li> <p>Schedule jobs to avoid concurrent writes to the same table</p> </li> <li> <p>Long-Running Transactions:</p> </li> <li>Break down large operations into smaller batches</li> <li>Avoid holding open transactions for extended periods</li> </ol>"},{"location":"troubleshooting/#missing-delta-table-history","title":"Missing Delta Table History","text":"<p>Symptoms: Unable to access previous versions of Delta tables.</p> <p>Possible Causes and Solutions:</p> <ol> <li>Vacuum Operations:</li> <li>Check if aggressive VACUUM commands have removed needed history</li> <li>Adjust retention period in VACUUM commands</li> <li>Use time travel only within the configured retention window</li> </ol>"},{"location":"troubleshooting/#serverless-sql-pool-issues","title":"Serverless SQL Pool Issues","text":""},{"location":"troubleshooting/#cannot-query-delta-tables-directly","title":"Cannot Query Delta Tables Directly","text":"<p>Symptoms: Error when trying to query Delta tables directly from Serverless SQL.</p> <p>Solution: Use the OPENROWSET function with the Parquet format, pointing to the Delta table's location, and include the latest file version:</p> <pre><code>SELECT TOP 100 *\nFROM OPENROWSET(\n    BULK 'https://youraccount.dfs.core.windows.net/container/table/_delta_log/*.json',\n    FORMAT = 'CSV',\n    FIELDTERMINATOR = '|',\n    FIELDQUOTE = '',\n    ROWTERMINATOR = '0x0b'\n) WITH (json_content VARCHAR(8000)) AS [rows]\nCROSS APPLY OPENJSON(json_content)\nWITH (\n    add BIT '$.add',\n    path VARCHAR(400) '$.path'\n)\nWHERE add = 1;\n</code></pre>"},{"location":"troubleshooting/#metadata-and-catalog-issues","title":"Metadata and Catalog Issues","text":""},{"location":"troubleshooting/#tables-created-in-spark-not-visible-in-sql","title":"Tables Created in Spark Not Visible in SQL","text":"<p>Symptoms: Tables created in Spark notebooks don't appear in Serverless SQL.</p> <p>Possible Causes and Solutions:</p> <ol> <li>Metadata Sync Issues:</li> <li>Ensure tables are created in the proper database/schema</li> <li>Verify the table is registered in the metastore</li> <li> <p>Check for name conflicts or case sensitivity issues</p> </li> <li> <p>Permissions Problems:</p> </li> <li>Confirm the SQL user has proper permissions to the storage location</li> <li>Verify storage access using SAS token or managed identity</li> </ol>"},{"location":"troubleshooting/#pipeline-and-integration-issues","title":"Pipeline and Integration Issues","text":""},{"location":"troubleshooting/#pipeline-failures-with-integration-datasets","title":"Pipeline Failures with Integration Datasets","text":"<p>Symptoms: Integration pipelines fail when connecting to external sources.</p> <p>Possible Causes and Solutions:</p> <ol> <li>Connectivity Issues:</li> <li>Check if the linked service configuration is correct</li> <li>Verify network connectivity to external sources</li> <li> <p>Confirm firewall rules allow connections from Azure</p> </li> <li> <p>Authentication Problems:</p> </li> <li>Verify credentials in linked services</li> <li>Check for expired secrets or certificates</li> <li>Test connections independently of the pipeline</li> </ol>"},{"location":"troubleshooting/#getting-further-help","title":"Getting Further Help","text":"<p>If you continue experiencing issues after trying these troubleshooting steps, consider the following resources:</p> <ol> <li>Azure Synapse Analytics Documentation</li> <li>Microsoft Q&amp;A for Synapse</li> <li>Azure Support</li> <li>Stack Overflow - Azure Synapse</li> </ol>"},{"location":"architecture/","title":"Azure Synapse Analytics Architecture","text":"<p>This section provides comprehensive architectural guidance for implementing Azure Synapse Analytics solutions in enterprise environments.</p>"},{"location":"architecture/#overview","title":"Overview","text":"<p>Azure Synapse Analytics is Microsoft's unified analytics service that brings together enterprise data warehousing, big data processing, data integration, and AI capabilities. This architecture documentation covers proven patterns, implementation approaches, and best practices for building robust, scalable, and secure analytics solutions.</p>"},{"location":"architecture/#key-architecture-principles","title":"Key Architecture Principles","text":"<ol> <li>Unified Data Platform: Integrate all your data assets into a cohesive ecosystem</li> <li>Polyglot Processing: Choose the right compute engine for different workloads (SQL, Spark, Data Explorer)</li> <li>Decoupled Storage &amp; Compute: Scale resources independently and optimize costs</li> <li>Security-First Design: Implement comprehensive security at all layers</li> <li>Performance Optimization: Apply techniques for maximum throughput and query performance</li> </ol>"},{"location":"architecture/#reference-architectures","title":"Reference Architectures","text":"<ul> <li> <p>Delta Lakehouse Architecture: Enterprise-scale lakehouse implementation using Delta Lake and Synapse Spark pools. This modern approach provides ACID transactions, schema enforcement, and time travel capabilities while maintaining the flexibility of a data lake.</p> </li> <li> <p>Serverless SQL Architecture: Pay-per-query patterns for ad-hoc analytics over data lake storage. Learn how to implement a cost-effective query layer for your data lake without provisioning infrastructure.</p> </li> <li> <p>Shared Metadata Architecture: Implementation approaches for unified semantic layers that work across Synapse engines. Create consistent metadata that can be leveraged by SQL pools, Spark pools, and external tools.</p> </li> </ul>"},{"location":"architecture/#integration-patterns","title":"Integration Patterns","text":"<ul> <li>Data Lake Integration: Patterns for connecting Azure Synapse with Azure Data Lake Storage Gen2</li> <li>Power BI Integration: Architectural approaches for real-time and scheduled analytics visualizations</li> <li>Azure ML Integration: Methods for incorporating machine learning workflows into your analytics pipeline</li> <li>CI/CD Pipeline Integration: DevOps practices for Synapse workspace artifacts</li> </ul>"},{"location":"architecture/#architecture-decision-framework","title":"Architecture Decision Framework","text":"<p>Use this decision tree to determine the optimal Synapse architecture for your specific requirements:</p> <ol> <li>Primary Workload Type:</li> <li>Enterprise Data Warehouse \u2192 Dedicated SQL Pool</li> <li>Data Lake Analytics \u2192 Serverless SQL + Spark</li> <li>Real-time Analytics \u2192 Synapse Data Explorer</li> <li> <p>Mixed Workloads \u2192 Unified approach with multiple engines</p> </li> <li> <p>Data Volume and Velocity:</p> </li> <li>TB-scale structured data \u2192 Dedicated SQL Pool</li> <li>PB-scale mixed data \u2192 Spark + Delta Lake</li> <li> <p>Streaming data \u2192 Data Explorer or Spark Structured Streaming</p> </li> <li> <p>Query Patterns:</p> </li> <li>Complex joins and aggregations \u2192 Dedicated SQL Pool</li> <li>AI/ML and data science \u2192 Spark</li> <li>Ad-hoc exploration \u2192 Serverless SQL Pool</li> <li>Time-series and log analytics \u2192 Data Explorer</li> </ol>"},{"location":"architecture/delta-lakehouse-overview/","title":"Delta lakehouse overview","text":"<p>Home &gt; Architecture &gt; Delta Lakehouse Overview</p>"},{"location":"architecture/delta-lakehouse-overview/#azure-synapse-analytics-delta-lakehouse-architecture","title":"Azure Synapse Analytics Delta Lakehouse Architecture","text":""},{"location":"architecture/delta-lakehouse-overview/#overview","title":"Overview","text":"<p>Azure Synapse Analytics Delta Lakehouse is a unified analytics platform that combines the best of data warehousing and big data processing. This architecture enables organizations to build a modern data architecture that supports both analytics and operational workloads.</p>"},{"location":"architecture/delta-lakehouse-overview/#key-components","title":"Key Components","text":""},{"location":"architecture/delta-lakehouse-overview/#1-delta-lake","title":"1. Delta Lake","text":"<ul> <li>Open-source storage layer that brings ACID transactions to Apache Spark and big data workloads</li> <li>Built on top of Apache Parquet</li> <li>Supports schema evolution and enforcement</li> <li>Provides time travel capabilities</li> <li>Optimized for both streaming and batch processing</li> </ul>"},{"location":"architecture/delta-lakehouse-overview/#2-spark-processing","title":"2. Spark Processing","text":"<ul> <li>Apache Spark as the compute engine</li> <li>Runs on Synapse Spark pools</li> <li>Supports both batch and real-time processing</li> <li>Native integration with Delta Lake</li> </ul>"},{"location":"architecture/delta-lakehouse-overview/#3-storage-layer","title":"3. Storage Layer","text":"<ul> <li>Azure Data Lake Storage Gen2</li> <li>ADLS Gen2 provides:</li> <li>High scalability</li> <li>Secure access control</li> <li>Cost-effective storage</li> <li>Integration with Azure services</li> </ul>"},{"location":"architecture/delta-lakehouse-overview/#architecture-diagram","title":"Architecture Diagram","text":"<pre><code>graph TD\n    ADLS[ADLS Gen2 Storage] --&gt; Delta[Delta Lake]\n    Delta --&gt; Spark[Apache Spark]\n    Spark --&gt; Synapse[Synapse Analytics]\n    Synapse --&gt; Serverless[Serverless SQL]\n    Synapse --&gt; Dedicated[Dedicated SQL]\n\n    subgraph \"Data Ingestion\"\n        Ingest[Data Sources]\n        Ingest --&gt; ADLS\n    end\n\n    subgraph \"Processing Layer\"\n        Spark --&gt; Delta\n    end\n\n    subgraph \"Analytics Layer\"\n        Synapse --&gt; Serverless\n        Synapse --&gt; Dedicated\n    end\n</code></pre>"},{"location":"architecture/delta-lakehouse-overview/#key-features","title":"Key Features","text":""},{"location":"architecture/delta-lakehouse-overview/#1-schema-management","title":"1. Schema Management","text":"<ul> <li>Schema enforcement</li> <li>Schema evolution</li> <li>Version control</li> <li>Time travel capabilities</li> </ul>"},{"location":"architecture/delta-lakehouse-overview/#2-performance-optimization","title":"2. Performance Optimization","text":"<ul> <li>Data skipping</li> <li>Z-ordering</li> <li>Clustering</li> <li>Statistics collection</li> </ul>"},{"location":"architecture/delta-lakehouse-overview/#3-security","title":"3. Security","text":"<ul> <li>Role-based access control</li> <li>Row-level security</li> <li>Data masking</li> <li>Audit logging</li> </ul>"},{"location":"architecture/delta-lakehouse-overview/#best-practices","title":"Best Practices","text":""},{"location":"architecture/delta-lakehouse-overview/#storage-organization","title":"Storage Organization","text":"<ul> <li>Use hierarchical folder structure</li> <li>Implement proper partitioning</li> <li>Regularly optimize files</li> <li>Use appropriate file sizes</li> </ul>"},{"location":"architecture/delta-lakehouse-overview/#schema-design","title":"Schema Design","text":"<ul> <li>Start with a flexible schema</li> <li>Plan for schema evolution</li> <li>Use appropriate data types</li> <li>Implement proper indexing</li> </ul>"},{"location":"architecture/delta-lakehouse-overview/#performance","title":"Performance","text":"<ul> <li>Use appropriate partitioning</li> <li>Implement proper bucketing</li> <li>Use Z-ordering for queries</li> <li>Regularly optimize files</li> </ul>"},{"location":"architecture/delta-lakehouse-overview/#next-steps","title":"Next Steps","text":"<ol> <li>Serverless SQL Architecture</li> <li>Shared Metadata Architecture</li> <li>Best Practices</li> <li>Code Examples</li> </ol>"},{"location":"architecture/delta-lakehouse/","title":"Delta Lakehouse Architecture with Azure Synapse","text":""},{"location":"architecture/delta-lakehouse/#overview","title":"Overview","text":"<p>The Delta Lakehouse architecture combines the flexibility and cost-efficiency of a data lake with the data management and ACID transaction capabilities of a data warehouse. Azure Synapse Analytics provides native integration with Delta Lake format, enabling a modern and efficient lakehouse implementation.</p>"},{"location":"architecture/delta-lakehouse/#architecture-components","title":"Architecture Components","text":""},{"location":"architecture/delta-lakehouse/#core-components","title":"Core Components","text":"<ol> <li>Azure Data Lake Storage Gen2</li> <li>Foundation for storing all data in raw, refined, and curated zones</li> <li>Hierarchical namespace for efficient file organization</li> <li> <p>Fine-grained ACLs for security at folder and file levels</p> </li> <li> <p>Delta Lake</p> </li> <li>Open-source storage layer that brings ACID transactions to data lakes</li> <li>Schema enforcement and evolution capabilities</li> <li>Time travel (data versioning) for auditing and rollbacks</li> <li> <p>Support for optimized Parquet format for performance</p> </li> <li> <p>Azure Synapse Spark Pools</p> </li> <li>Distributed processing engine for data transformation</li> <li>Native support for Delta Lake format</li> <li>Scalable compute for batch and stream processing</li> <li> <p>Integration with Azure Machine Learning for advanced analytics</p> </li> <li> <p>Azure Synapse SQL</p> </li> <li>SQL interface for querying Delta tables</li> <li>Serverless pool for ad-hoc analytics</li> <li>Dedicated pool for enterprise data warehousing</li> </ol>"},{"location":"architecture/delta-lakehouse/#implementation-patterns","title":"Implementation Patterns","text":""},{"location":"architecture/delta-lakehouse/#multi-zone-data-organization","title":"Multi-Zone Data Organization","text":"<pre><code>adls://data/\n\u251c\u2500\u2500 raw/                  # Raw ingested data\n\u251c\u2500\u2500 refined/              # Cleansed and conformed data\n\u2514\u2500\u2500 curated/              # Business-ready data products\n</code></pre>"},{"location":"architecture/delta-lakehouse/#medallion-architecture","title":"Medallion Architecture","text":"<p>The medallion architecture organizes your Delta Lake data into layers with increasing data quality and refinement:</p> <ol> <li>Bronze Layer (Raw Data)</li> <li>Ingestion sink for all source data</li> <li>Preserves original data format and content</li> <li>Minimal transformation, primarily ELT</li> <li> <p>Schema-on-read approach</p> </li> <li> <p>Silver Layer (Refined Data)</p> </li> <li>Cleansed and conformed data</li> <li>Standardized formats and resolved duplicates</li> <li>Common data quality rules applied</li> <li> <p>Typically organized by domain or source system</p> </li> <li> <p>Gold Layer (Curated Data)</p> </li> <li>Business-level aggregates and metrics</li> <li>Dimensional models for reporting</li> <li>Feature tables for machine learning</li> <li>Optimized for specific analytical use cases</li> </ol>"},{"location":"architecture/delta-lakehouse/#performance-optimization","title":"Performance Optimization","text":""},{"location":"architecture/delta-lakehouse/#delta-optimizations","title":"Delta Optimizations","text":"<ul> <li>Data Skipping: Delta maintains statistics to skip irrelevant files during queries</li> <li>Z-Ordering: Multi-dimensional clustering for improved filtering performance</li> <li>Compaction: Small file consolidation to optimize read performance</li> <li>Caching: Metadata and data caching for frequently accessed tables</li> </ul>"},{"location":"architecture/delta-lakehouse/#spark-tuning","title":"Spark Tuning","text":"<ul> <li>Autoscaling: Configure Spark pools to scale based on workload</li> <li>Partition Management: Right-size partitions to optimize parallelism</li> <li>Memory Configuration: Allocate appropriate memory for shuffle and execution</li> <li>Query Plan Optimization: Analyze and tune Spark execution plans</li> </ul>"},{"location":"architecture/delta-lakehouse/#governance-and-security","title":"Governance and Security","text":"<ul> <li>Azure Purview Integration: Data cataloging and lineage tracking</li> <li>Column-Level Security: Fine-grained access control within tables</li> <li>Row-Level Security: Filter data based on user context</li> <li>Transparent Data Encryption: Data encryption at rest</li> </ul>"},{"location":"architecture/delta-lakehouse/#deployment-and-devops","title":"Deployment and DevOps","text":"<ul> <li>Infrastructure as Code: Deploy lakehouse components using ARM templates or Terraform</li> <li>CI/CD Pipelines: Automated testing and deployment of Spark notebooks and SQL scripts</li> <li>Monitoring: Azure Monitor integration for performance tracking and alerts</li> <li>Delta Live Tables: Declarative ETL framework for reliable pipeline development</li> </ul>"},{"location":"architecture/delta-lakehouse/#best-practices","title":"Best Practices","text":"<ol> <li>Implement a systematic approach to schema evolution</li> <li>Use appropriate partitioning strategies based on data access patterns</li> <li>Apply retention policies to manage data lifecycle efficiently</li> <li>Leverage checkpoint files for streaming workloads</li> <li>Implement Slowly Changing Dimension patterns for tracking historical changes</li> <li>Use Z-Ordering on frequently filtered columns</li> <li>Maintain separate compute clusters for ETL and query workloads</li> <li>Implement CI/CD practices for Delta table schema changes</li> </ol>"},{"location":"architecture/delta-lakehouse/detailed-architecture/","title":"Detailed architecture","text":"<p>Home &gt; Architecture &gt; Delta Lakehouse &gt; Detailed Architecture</p>"},{"location":"architecture/delta-lakehouse/detailed-architecture/#azure-synapse-analytics-delta-lakehouse-detailed-architecture","title":"Azure Synapse Analytics Delta Lakehouse Detailed Architecture","text":""},{"location":"architecture/delta-lakehouse/detailed-architecture/#overview","title":"Overview","text":"<p>The Delta Lakehouse architecture combines the best of data lakes and data warehouses, providing ACID transactions, schema enforcement, and time travel capabilities while maintaining the flexibility and scalability of a data lake. This document details the implementation of a Delta Lakehouse using Azure Synapse Analytics.</p>"},{"location":"architecture/delta-lakehouse/detailed-architecture/#core-components","title":"Core Components","text":""},{"location":"architecture/delta-lakehouse/detailed-architecture/#storage-layer","title":"Storage Layer","text":"<p>Azure Data Lake Storage Gen2 (ADLS Gen2) - Hierarchical namespace for efficient directory/file operations - Built-in security with Azure Active Directory integration - Cost-effective storage with tiering capabilities (hot, cool, archive) - Designed for high throughput and parallelism</p> <p>Storage Organization <pre><code>datalake/\n\u251c\u2500\u2500 bronze/             # Raw ingested data\n\u2502   \u251c\u2500\u2500 source1/\n\u2502   \u2514\u2500\u2500 source2/\n\u251c\u2500\u2500 silver/             # Cleaned and transformed data\n\u2502   \u251c\u2500\u2500 dimension1/\n\u2502   \u2514\u2500\u2500 fact1/\n\u2514\u2500\u2500 gold/               # Business-level aggregated data\n    \u251c\u2500\u2500 reports/\n    \u2514\u2500\u2500 analytics/\n</code></pre></p>"},{"location":"architecture/delta-lakehouse/detailed-architecture/#compute-layer","title":"Compute Layer","text":"<p>Azure Synapse Spark Pools - Fully managed Apache Spark service - Autoscaling capabilities based on workload - Native integration with Delta Lake - Configurable for memory-optimized or compute-optimized workloads</p> <p>Pool Configurations | Pool Type | Node Size | Autoscale | Use Case | |-----------|----------|-----------|----------| | Small | Medium (8 vCores) | 3-10 nodes | Development, testing | | Medium | Large (16 vCores) | 5-20 nodes | Production ETL | | Large | XLarge (32 vCores) | 10-40 nodes | Data science workloads |</p>"},{"location":"architecture/delta-lakehouse/detailed-architecture/#delta-lake-integration","title":"Delta Lake Integration","text":"<p>Key Components - Transaction log for ACID compliance - Optimistic concurrency control - Schema enforcement and evolution - Data skipping and Z-ordering for query optimization - Time travel capabilities</p> <p>Implementation <pre><code># Example of configuring Spark with Delta Lake\nspark = SparkSession.builder \\\n    .appName(\"Delta Lake Configuration\") \\\n    .config(\"spark.sql.extensions\", \"io.delta.sql.DeltaSparkSessionExtension\") \\\n    .config(\"spark.sql.catalog.spark_catalog\", \"org.apache.spark.sql.delta.catalog.DeltaCatalog\") \\\n    .getOrCreate()\n\n# Setting Delta specific configurations\nspark.conf.set(\"spark.databricks.delta.properties.defaults.enableChangeDataFeed\", \"true\")\nspark.conf.set(\"spark.databricks.delta.optimize.maxFileSize\", 1024 * 1024 * 256)  # 256MB\nspark.conf.set(\"spark.databricks.delta.autoCompact.enabled\", \"true\")\n</code></pre></p>"},{"location":"architecture/delta-lakehouse/detailed-architecture/#architecture-patterns","title":"Architecture Patterns","text":""},{"location":"architecture/delta-lakehouse/detailed-architecture/#bronze-silver-gold-pattern","title":"Bronze-Silver-Gold Pattern","text":"<p>Bronze Layer (Raw Data) - Ingests data in raw format with minimal transformation - Preserves original data for auditing and reprocessing - Implemented as Delta tables with schema inference - Retention policies based on compliance requirements</p> <p>Silver Layer (Processed Data) - Cleaned and conformed data - Standardized formats and data types - Data quality checks and validation - Implemented as Delta tables with strict schemas</p> <p>Gold Layer (Business Data) - Aggregated, enriched data ready for consumption - Optimized for specific business domains or use cases - Often dimensional models or denormalized structures - Implemented as Delta tables optimized for query performance</p>"},{"location":"architecture/delta-lakehouse/detailed-architecture/#data-ingestion-patterns","title":"Data Ingestion Patterns","text":"<p>Batch Ingestion - Using Azure Synapse pipelines for orchestration - Scheduled or event-triggered processing - Support for various source formats (CSV, JSON, Parquet, etc.) - Parallel loading for high-volume data</p> <p>Stream Ingestion - Integration with Azure Event Hubs or Kafka - Real-time processing with Structured Streaming - Delta Lake's support for streaming writes - Auto-compaction for optimizing small files</p>"},{"location":"architecture/delta-lakehouse/detailed-architecture/#data-processing-patterns","title":"Data Processing Patterns","text":"<p>ELT (Extract, Load, Transform) - Load raw data into Bronze layer - Transform in-place using Spark SQL or DataFrame APIs - Move processed data to Silver and Gold layers - Leverages Synapse's distributed processing capabilities</p>"},{"location":"architecture/delta-lakehouse/detailed-architecture/#advanced-features","title":"Advanced Features","text":""},{"location":"architecture/delta-lakehouse/detailed-architecture/#time-travel-and-versioning","title":"Time Travel and Versioning","text":"<p>Delta Lake provides time travel capabilities, allowing queries against previous versions of the data. This is particularly useful for:</p> <ul> <li>Auditing and compliance</li> <li>Debugging and rollback scenarios</li> <li>Point-in-time analysis</li> <li>Reproducible reporting</li> </ul> <pre><code>-- Query data as of a specific timestamp\nSELECT * FROM delta.`/path/to/table` TIMESTAMP AS OF '2025-08-01 00:00:00'\n\n-- Query data as of a specific version\nSELECT * FROM delta.`/path/to/table` VERSION AS OF 123\n</code></pre>"},{"location":"architecture/delta-lakehouse/detailed-architecture/#schema-evolution","title":"Schema Evolution","text":"<p>Delta Lake supports schema evolution, allowing tables to adapt as data structures change over time:</p> <ul> <li>Add new columns</li> <li>Change data types (with compatible conversions)</li> <li>Rename columns using column mapping</li> </ul> <pre><code>-- Add a new column with a default value\nALTER TABLE delta_table ADD COLUMN new_column STRING DEFAULT 'default_value'\n</code></pre>"},{"location":"architecture/delta-lakehouse/detailed-architecture/#change-data-capture-cdc","title":"Change Data Capture (CDC)","text":"<p>Delta Lake supports Change Data Feed, enabling downstream systems to consume only changed data:</p> <pre><code># Enable CDC on a Delta table\nspark.sql(\"ALTER TABLE delta_table SET TBLPROPERTIES (delta.enableChangeDataFeed = true)\")\n\n# Read changes between versions\nchanges = spark.read.format(\"delta\") \\\n    .option(\"readChangeFeed\", \"true\") \\\n    .option(\"startingVersion\", 5) \\\n    .option(\"endingVersion\", 10) \\\n    .table(\"delta_table\")\n</code></pre>"},{"location":"architecture/delta-lakehouse/detailed-architecture/#optimizations","title":"Optimizations","text":"<p>Data Skipping - Delta Lake maintains statistics on data files - Query predicates use these statistics to skip irrelevant files - Significantly improves query performance</p> <p>Z-Ordering - Multi-dimensional clustering technique - Colocates related data together - Improves query performance when filtering on Z-ordered columns</p> <pre><code>-- Z-order by multiple columns\nOPTIMIZE delta_table ZORDER BY (date_column, region_column)\n</code></pre> <p>File Compaction - Combines small files into larger ones - Reduces metadata overhead - Improves scan performance</p> <pre><code>-- Compact files without Z-ordering\nOPTIMIZE delta_table\n</code></pre>"},{"location":"architecture/delta-lakehouse/detailed-architecture/#security-and-governance","title":"Security and Governance","text":""},{"location":"architecture/delta-lakehouse/detailed-architecture/#authentication-and-authorization","title":"Authentication and Authorization","text":"<p>Azure Active Directory Integration - Single sign-on with Azure AD - Role-based access control (RBAC) - Integration with existing identity systems - Support for managed identities</p> <p>Fine-grained Access Control - Table-level and column-level security - Row-level security through Delta Lake filters - Dynamic data masking for sensitive fields</p>"},{"location":"architecture/delta-lakehouse/detailed-architecture/#data-governance","title":"Data Governance","text":"<p>Azure Purview Integration - Automated data discovery and classification - Data lineage tracking - Sensitive data identification - Centralized metadata management</p> <p>Metadata Management - Schema history tracking - Transaction history logging - Origin tracking with detailed provenance - Integration with external metadata systems</p>"},{"location":"architecture/delta-lakehouse/detailed-architecture/#monitoring-and-optimization","title":"Monitoring and Optimization","text":""},{"location":"architecture/delta-lakehouse/detailed-architecture/#performance-monitoring","title":"Performance Monitoring","text":"<p>Azure Monitor Integration - Resource utilization tracking - Query performance metrics - Cost analysis - Alerting on performance degradation</p> <p>Delta-specific Metrics - Transaction log size and growth rate - Data skipping effectiveness - Compaction efficiency - Read/write throughput</p>"},{"location":"architecture/delta-lakehouse/detailed-architecture/#cost-optimization-strategies","title":"Cost Optimization Strategies","text":"<p>Storage Optimization - Tiered storage policies - Data lifecycle management - Vacuum operations to remove stale files - Compression settings optimization</p> <p>Compute Optimization - Right-sizing Spark pools - Autoscaling configurations - Workload isolation for predictable performance - Caching strategies for frequently accessed data</p>"},{"location":"architecture/delta-lakehouse/detailed-architecture/#integration-points","title":"Integration Points","text":""},{"location":"architecture/delta-lakehouse/detailed-architecture/#synapse-sql-integration","title":"Synapse SQL Integration","text":"<ul> <li>Query Delta tables directly from Serverless SQL pools</li> <li>Create external tables over Delta format</li> <li>Join between Delta Lake and other data sources</li> <li>Cross-engine queries (Spark and SQL)</li> </ul>"},{"location":"architecture/delta-lakehouse/detailed-architecture/#power-bi-integration","title":"Power BI Integration","text":"<ul> <li>Direct Query support for Delta tables</li> <li>Composite models combining Delta Lake with other sources</li> <li>Incremental refresh based on Delta Lake partitioning</li> <li>Enterprise-scale semantic models</li> </ul>"},{"location":"architecture/delta-lakehouse/detailed-architecture/#azure-machine-learning","title":"Azure Machine Learning","text":"<ul> <li>Feature store implementation using Delta Lake</li> <li>Model training on Delta tables</li> <li>Model deployment with feature versioning</li> <li>MLOps workflows with data and model versioning</li> </ul>"},{"location":"architecture/delta-lakehouse/detailed-architecture/#reference-implementation","title":"Reference Implementation","text":"<p>For a detailed reference implementation of Delta Lakehouse in Azure Synapse Analytics, refer to the code examples section of this documentation.</p>"},{"location":"architecture/serverless-sql/","title":"Index","text":"<p>Home &gt; Architecture &gt; Serverless SQL</p>"},{"location":"architecture/serverless-sql/#serverless-sql-architecture","title":"Serverless SQL Architecture","text":"<p>Serverless SQL architecture in Azure Synapse Analytics allows you to query data directly in your data lake without moving or copying data, using familiar T-SQL syntax.</p>"},{"location":"architecture/serverless-sql/#documentation","title":"Documentation","text":"<ul> <li>Serverless SQL Overview - Introduction to Serverless SQL capabilities</li> <li>Detailed Architecture - Comprehensive technical architecture of Serverless SQL implementation</li> </ul>"},{"location":"architecture/serverless-sql/#key-features","title":"Key Features","text":"<ul> <li>On-demand querying with no infrastructure to manage</li> <li>Pay-per-query cost model</li> <li>T-SQL compatibility</li> <li>Native integration with Azure Data Lake Storage</li> <li>Built-in data virtualization</li> <li>Seamless integration with visualization tools</li> </ul>"},{"location":"architecture/serverless-sql/#related-resources","title":"Related Resources","text":"<ul> <li>Best Practices for Serverless SQL</li> <li>Code Examples</li> <li>Reference Documentation</li> </ul>"},{"location":"architecture/serverless-sql/detailed-architecture/","title":"Detailed architecture","text":"<p>Home &gt; Architecture &gt; Serverless SQL &gt; Detailed Architecture</p>"},{"location":"architecture/serverless-sql/detailed-architecture/#azure-synapse-analytics-serverless-sql-detailed-architecture","title":"Azure Synapse Analytics Serverless SQL: Detailed Architecture","text":""},{"location":"architecture/serverless-sql/detailed-architecture/#overview","title":"Overview","text":"<p>Azure Synapse Serverless SQL Pool provides on-demand, auto-scaling SQL query capabilities without the need to provision or manage infrastructure. This document provides a detailed technical overview of the serverless SQL architecture in Azure Synapse Analytics, focusing on querying data lakes, integrating with Delta Lake format, and optimizing for performance and cost.</p>"},{"location":"architecture/serverless-sql/detailed-architecture/#core-architecture","title":"Core Architecture","text":""},{"location":"architecture/serverless-sql/detailed-architecture/#distributed-query-processing","title":"Distributed Query Processing","text":"<p>Serverless SQL in Azure Synapse Analytics utilizes a distributed query processing architecture:</p> <ol> <li>Query Parsing and Planning</li> <li>SQL query parsing and syntax validation</li> <li>Query plan optimization based on statistics and metadata</li> <li> <p>Distributed execution plan generation</p> </li> <li> <p>Compute Layer</p> </li> <li>Dynamically allocated compute resources based on query complexity</li> <li>Automatic scaling during query execution</li> <li> <p>Pay-per-query billing model (TB processed)</p> </li> <li> <p>Data Access Layer</p> </li> <li>Parallel data access to storage systems</li> <li>Native support for multiple file formats</li> <li>Data virtualization capabilities</li> </ol>"},{"location":"architecture/serverless-sql/detailed-architecture/#logical-architecture","title":"Logical Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                 Client Applications               \u2502\n\u2502  (SSMS, Azure Data Studio, Power BI, Custom Apps) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                    \u2502\n                    \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502               Synapse SQL Endpoint                \u2502\n\u2502           (TDS Protocol over TCP/IP)              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                    \u2502\n                    \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502              Query Processing Engine              \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Query Parser  \u2502 Query Planner \u2502 Query Optimizer   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                            \u2502\n                            \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502            Distributed Query Execution            \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  Data Access  \u2502  Processing   \u2502  Result Assembly  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                            \u2502\n                            \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                  Storage Layer                    \u2502\n\u2502       (ADLS Gen2, Azure Blob, Delta Lake)         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/serverless-sql/detailed-architecture/#key-components","title":"Key Components","text":""},{"location":"architecture/serverless-sql/detailed-architecture/#endpoint-management","title":"Endpoint Management","text":"<p>Serverless SQL Pool provides a dedicated SQL endpoint with:</p> <ul> <li>Standard TDS (Tabular Data Stream) protocol support</li> <li>Compatibility with standard SQL clients and tools</li> <li>Always-on connectivity for applications</li> <li>Connection pooling and management</li> </ul>"},{"location":"architecture/serverless-sql/detailed-architecture/#resource-management","title":"Resource Management","text":"<p>Dynamic Resource Allocation - Resources automatically scale based on query complexity - Parallel processing adapts to data volume and query patterns - CPU and memory allocation optimized for each query phase - Isolation between multiple concurrent queries</p> <p>Billing Model - Pay only for data processed during query execution - Billed per TB of data scanned - No charges when idle - Predictable cost model for data exploration and analytics</p>"},{"location":"architecture/serverless-sql/detailed-architecture/#query-processing","title":"Query Processing","text":"<p>Query Compilation - SQL query parsing and validation - Syntax compatibility with T-SQL - Query plan optimization for distributed execution - Statistics-based cardinality estimation</p> <p>Execution Engine - Massively parallel processing (MPP) architecture - Distributed query execution across multiple nodes - Dynamic node allocation based on workload - Fault-tolerant execution with node failover</p>"},{"location":"architecture/serverless-sql/detailed-architecture/#data-access-capabilities","title":"Data Access Capabilities","text":""},{"location":"architecture/serverless-sql/detailed-architecture/#file-format-support","title":"File Format Support","text":"<p>Serverless SQL Pool provides native support for multiple file formats:</p> Format Key Features Best For Parquet Columnar storage, compression, predicate pushdown Analytics workloads, high-performance queries Delta ACID transactions, time travel, schema evolution Data lakes with transactional requirements CSV Human-readable, widely supported, variable delimiters Data exchange, simple datasets JSON Semi-structured data, nested objects, arrays Application logs, API data, flexible schemas"},{"location":"architecture/serverless-sql/detailed-architecture/#external-tables","title":"External Tables","text":"<p>Serverless SQL enables creating metadata-driven external tables that provide:</p> <ul> <li>Schema-on-read capabilities with schema enforcement</li> <li>Statistics collection for better query optimization</li> <li>Persistent metadata for consistent data access</li> <li>Security and access control integration</li> </ul> <pre><code>-- Example of creating an external table over Delta format\nCREATE EXTERNAL TABLE ExternalDeltaTable\n(\n    CustomerID INT,\n    Name NVARCHAR(100),\n    OrderDate DATE,\n    Amount DECIMAL(18,2)\n)\nWITH\n(\n    LOCATION = 'orders/delta/',\n    DATA_SOURCE = ExternalDataSource,\n    FILE_FORMAT = DeltaFormat\n)\n</code></pre>"},{"location":"architecture/serverless-sql/detailed-architecture/#query-syntax-extensions","title":"Query Syntax Extensions","text":"<p>Serverless SQL Pool extends T-SQL with specialized syntax for external data access:</p> <p>OPENROWSET - Ad-hoc queries against file storage - Schema inference capabilities - Format-specific options for optimal access</p> <pre><code>-- Example of querying Delta format with OPENROWSET\nSELECT TOP 100 *\nFROM OPENROWSET(\n    BULK 'https://account.dfs.core.windows.net/container/path/to/delta/',\n    FORMAT = 'DELTA'\n) AS [result]\n</code></pre> <p>Specialized Functions - <code>FILEPATH()</code> - Access file path information - <code>FILENAME()</code> - Extract filename from path - <code>FORMAT_TYPE()</code> - Determine file format details</p>"},{"location":"architecture/serverless-sql/detailed-architecture/#integration-with-delta-lake","title":"Integration with Delta Lake","text":""},{"location":"architecture/serverless-sql/detailed-architecture/#reading-delta-tables","title":"Reading Delta Tables","text":"<p>Serverless SQL Pool provides native support for reading Delta Lake tables:</p> <ul> <li>Reads Delta transaction log to find latest snapshot</li> <li>Honors partition pruning for efficient data access</li> <li>Supports time travel queries using timestamp or version</li> </ul> <pre><code>-- Query latest version of Delta table\nSELECT * FROM OPENROWSET(\n    BULK 'https://account.dfs.core.windows.net/container/path/to/delta/',\n    FORMAT = 'DELTA'\n) AS [data]\n\n-- Query specific version of Delta table\nSELECT * FROM OPENROWSET(\n    BULK 'https://account.dfs.core.windows.net/container/path/to/delta/',\n    FORMAT = 'DELTA',\n    DELTA_VERSION = 5\n) AS [data]\n</code></pre>"},{"location":"architecture/serverless-sql/detailed-architecture/#metadata-integration","title":"Metadata Integration","text":"<p>Schema Discovery - Automatic schema inference from Delta metadata - Data type mapping between Spark and SQL types - Support for nested structures and arrays</p> <p>Statistics Utilization - Leverages Delta statistics for query optimization - Data skipping based on min/max values - Partition elimination for efficient data access</p>"},{"location":"architecture/serverless-sql/detailed-architecture/#security-and-access-control","title":"Security and Access Control","text":""},{"location":"architecture/serverless-sql/detailed-architecture/#authentication-methods","title":"Authentication Methods","text":"<p>Serverless SQL Pool supports multiple authentication methods:</p> <ul> <li>Azure Active Directory integration</li> <li>SQL authentication for legacy applications</li> <li>Managed identities for service-to-service authentication</li> <li>Azure AD Pass-through for end-user identity flow</li> </ul>"},{"location":"architecture/serverless-sql/detailed-architecture/#authorization-and-access-control","title":"Authorization and Access Control","text":"<p>Resource-level Security - Role-based access control (RBAC) on Synapse workspace - SQL role-based security for database objects - Managed private endpoints for network isolation</p> <p>Data-level Security - Row-level security (RLS) policies - Column-level security and data masking - Azure storage access control with SAS or AAD</p> <pre><code>-- Example of row-level security implementation\nCREATE SECURITY POLICY SalesDataFilter\nADD FILTER PREDICATE dbo.fn_securitypredicate(RegionID) ON dbo.SalesData\nWITH (STATE = ON);\n</code></pre>"},{"location":"architecture/serverless-sql/detailed-architecture/#performance-optimization","title":"Performance Optimization","text":""},{"location":"architecture/serverless-sql/detailed-architecture/#query-performance-techniques","title":"Query Performance Techniques","text":"<p>Data Layout Optimization - Partitioning strategies for efficient filtering - File size optimization (recommended: 100MB-1GB) - Data organization for common access patterns</p> <p>Predicate Pushdown - Filter pushdown to storage layer - Column pruning for reading only required fields - Partition elimination for scanned data reduction</p> <p>Statistics Management - Creating statistics on key columns - AUTO_CREATE_STATISTICS option - Regular statistics updates for changing data</p> <pre><code>-- Create statistics for better query plans\nCREATE STATISTICS Stats_OrderDate ON ExternalTable(OrderDate);\n</code></pre>"},{"location":"architecture/serverless-sql/detailed-architecture/#caching-mechanisms","title":"Caching Mechanisms","text":"<p>Result Set Cache - Automatic caching of query results - Cache invalidation on data changes - Configurable TTL for cached results</p> <p>Metadata Caching - Storage of file listings and statistics - Schema caching for faster queries - Partition metadata for efficient access</p>"},{"location":"architecture/serverless-sql/detailed-architecture/#scaling-and-limits","title":"Scaling and Limits","text":""},{"location":"architecture/serverless-sql/detailed-architecture/#concurrency-management","title":"Concurrency Management","text":"<p>Serverless SQL Pool provides built-in concurrency control:</p> <ul> <li>Dynamic resource management for concurrent queries</li> <li>Workload classification and importance</li> <li>Query queuing during high concurrency periods</li> <li>Configurable concurrency limits by resource class</li> </ul>"},{"location":"architecture/serverless-sql/detailed-architecture/#resource-limits","title":"Resource Limits","text":"<p>Key resource limitations to consider:</p> Resource Limit Maximum query memory 1 GB per DW100 Maximum query execution time 60 minutes Maximum result set size 10 GB Maximum columns per table 1,024 Maximum SQL statement size 1 MB Maximum concurrent queries Varies by resource class"},{"location":"architecture/serverless-sql/detailed-architecture/#integration-scenarios","title":"Integration Scenarios","text":""},{"location":"architecture/serverless-sql/detailed-architecture/#cross-engine-queries","title":"Cross-Engine Queries","text":"<p>Serverless SQL Pool can participate in cross-engine queries:</p> <ul> <li>Query Spark tables from SQL</li> <li>Join data between SQL and Spark</li> <li>Create views combining multiple sources</li> <li>Cross-service parameterized queries</li> </ul>"},{"location":"architecture/serverless-sql/detailed-architecture/#synapse-link-integration","title":"Synapse Link Integration","text":"<p>Native integration with Synapse Link for:</p> <ul> <li>Azure Cosmos DB analytical store</li> <li>Azure SQL Database change feed</li> <li>Near real-time analytics on operational data</li> <li>Hybrid HTAP (Hybrid Transactional/Analytical Processing) workloads</li> </ul>"},{"location":"architecture/serverless-sql/detailed-architecture/#powerbi-integration","title":"PowerBI Integration","text":"<p>Optimized connection patterns for PowerBI:</p> <ul> <li>DirectQuery for real-time data access</li> <li>Import mode for pre-aggregated datasets</li> <li>Composite models combining multiple sources</li> <li>Row-level security pass-through</li> </ul>"},{"location":"architecture/serverless-sql/detailed-architecture/#monitoring-and-management","title":"Monitoring and Management","text":""},{"location":"architecture/serverless-sql/detailed-architecture/#query-monitoring","title":"Query Monitoring","text":"<p>Comprehensive monitoring capabilities:</p> <ul> <li>Dynamic management views (DMVs) for query insights</li> <li>Query execution plans and statistics</li> <li>Resource utilization metrics</li> <li>Query performance troubleshooting</li> </ul> <pre><code>-- Example of monitoring active queries\nSELECT\n    request_id,\n    session_id,\n    status,\n    submit_time,\n    total_elapsed_time,\n    command\nFROM\n    sys.dm_pdw_exec_requests\nWHERE\n    status NOT IN ('Completed', 'Failed', 'Cancelled')\nORDER BY\n    submit_time DESC;\n</code></pre>"},{"location":"architecture/serverless-sql/detailed-architecture/#cost-management","title":"Cost Management","text":"<p>Tools and practices for cost optimization:</p> <ul> <li>Query data volume estimation</li> <li>Cost tracking by query and user</li> <li>Alerting on excessive data processing</li> <li>Query optimization for reduced data scanning</li> </ul>"},{"location":"architecture/serverless-sql/detailed-architecture/#best-practices","title":"Best Practices","text":""},{"location":"architecture/serverless-sql/detailed-architecture/#query-optimization","title":"Query Optimization","text":"<ul> <li>Filter data as early as possible in the query</li> <li>Limit columns selected to only those needed</li> <li>Use appropriate data types for joins and comparisons</li> <li>Optimize file formats and compression settings</li> <li>Use partitioning aligned with common query patterns</li> </ul>"},{"location":"architecture/serverless-sql/detailed-architecture/#data-organization","title":"Data Organization","text":"<ul> <li>Implement logical partitioning by date/business unit</li> <li>Target optimal file sizes (100MB-1GB)</li> <li>Use Delta Lake for frequently updated data</li> <li>Implement a medallion architecture (bronze/silver/gold)</li> <li>Consider data lifecycle management for cost optimization</li> </ul>"},{"location":"architecture/serverless-sql/detailed-architecture/#reference-architecture-patterns","title":"Reference Architecture Patterns","text":""},{"location":"architecture/serverless-sql/detailed-architecture/#data-lake-query-layer","title":"Data Lake Query Layer","text":"<p>Using Serverless SQL as a query layer over a data lake:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Power BI    \u251c\u2500\u2500\u2500\u25ba\u2502 Serverless  \u251c\u2500\u2500\u2500\u25ba\u2502 Data Lake   \u2502\n\u2502 Excel       \u2502    \u2502 SQL Pool    \u2502    \u2502 (ADLS Gen2) \u2502\n\u2502 SSMS        \u2502    \u2502             \u2502    \u2502             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/serverless-sql/detailed-architecture/#hybrid-query-architecture","title":"Hybrid Query Architecture","text":"<p>Combining dedicated and serverless pools for different workloads:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Mission-    \u251c\u2500\u2500\u2500\u25ba\u2502 Dedicated   \u251c\u2500\u2500\u2500\u25ba\u2502 Curated     \u2502\n\u2502 Critical    \u2502    \u2502 SQL Pool    \u2502    \u2502 Data Mart   \u2502\n\u2502 Reports     \u2502    \u2502             \u2502    \u2502             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n      \u2502                                      \u25b2\n      \u2502                                      \u2502\n      \u2502            \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba\u2502 Serverless  \u251c\u2500\u2500\u2500\u25ba\u2502 Data Lake   \u2502\n                   \u2502 SQL Pool    \u2502    \u2502 (Raw Data)  \u2502\n                   \u2502             \u2502    \u2502             \u2502\n                   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/serverless-sql/detailed-architecture/#data-virtualization-hub","title":"Data Virtualization Hub","text":"<p>Using Serverless SQL as a data virtualization layer:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 BI Tools    \u2502    \u2502 Serverless  \u2502    \u2502 Azure SQL   \u2502\n\u2502 Custom Apps \u251c\u2500\u2500\u2500\u25ba\u2502 SQL Pool    \u251c\u2500\u2500\u2500\u25ba\u2502 Cosmos DB   \u2502\n\u2502 Reporting   \u2502    \u2502 (Polybase)  \u2502    \u2502 Data Lake   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/serverless-sql/detailed-architecture/#reference-implementation","title":"Reference Implementation","text":"<p>For detailed code samples and implementation patterns for Serverless SQL in Azure Synapse Analytics, refer to the code examples section of this documentation.</p>"},{"location":"architecture/serverless-sql/serverless-overview/","title":"Serverless overview","text":"<p>Home &gt; Architecture &gt; Serverless SQL &gt; Overview</p>"},{"location":"architecture/serverless-sql/serverless-overview/#azure-synapse-serverless-sql-architecture","title":"Azure Synapse Serverless SQL Architecture","text":""},{"location":"architecture/serverless-sql/serverless-overview/#overview","title":"Overview","text":"<p>Azure Synapse Serverless SQL is a serverless query engine that enables you to query data in your data lake using SQL without managing any infrastructure. It works seamlessly with Delta Lakehouse and provides several advantages over traditional SQL databases.</p>"},{"location":"architecture/serverless-sql/serverless-overview/#key-features","title":"Key Features","text":""},{"location":"architecture/serverless-sql/serverless-overview/#1-serverless-architecture","title":"1. Serverless Architecture","text":"<ul> <li>No infrastructure management</li> <li>Pay-per-query pricing</li> <li>Automatic scaling</li> <li>High availability</li> </ul>"},{"location":"architecture/serverless-sql/serverless-overview/#2-data-access","title":"2. Data Access","text":"<ul> <li>Query data directly from ADLS Gen2</li> <li>Support for multiple file formats:</li> <li>Parquet</li> <li>Delta</li> <li>CSV</li> <li>JSON</li> <li>Avro</li> </ul>"},{"location":"architecture/serverless-sql/serverless-overview/#3-performance-optimizations","title":"3. Performance Optimizations","text":"<ul> <li>Pushdown predicates</li> <li>Columnar processing</li> <li>Caching</li> <li>Query optimization</li> </ul>"},{"location":"architecture/serverless-sql/serverless-overview/#architecture-components","title":"Architecture Components","text":""},{"location":"architecture/serverless-sql/serverless-overview/#1-external-tables","title":"1. External Tables","text":"<ul> <li>Define schema over existing data</li> <li>Support for partitioned data</li> <li>Statistics collection</li> <li>Row-level security</li> </ul>"},{"location":"architecture/serverless-sql/serverless-overview/#2-views","title":"2. Views","text":"<ul> <li>Materialized views</li> <li>Regular views</li> <li>Security views</li> </ul>"},{"location":"architecture/serverless-sql/serverless-overview/#3-security","title":"3. Security","text":"<ul> <li>Role-based access control</li> <li>Row-level security</li> <li>Column-level security</li> <li>Secure data access</li> </ul>"},{"location":"architecture/serverless-sql/serverless-overview/#shared-metadata-architecture","title":"Shared Metadata Architecture","text":"<pre><code>graph TD\n    ADLS[ADLS Gen2 Storage] --&gt; Delta[Delta Lake]\n    Delta --&gt; Serverless[Serverless SQL]\n    Delta --&gt; Spark[Spark Pool]\n\n    subgraph \"Metadata Layer\"\n        Metadata --&gt; Delta\n        Metadata --&gt; Serverless\n        Metadata --&gt; Spark\n    end\n\n    subgraph \"Security\"\n        Security --&gt; Metadata\n        Security --&gt; ADLS\n    end\n</code></pre>"},{"location":"architecture/serverless-sql/serverless-overview/#best-practices","title":"Best Practices","text":""},{"location":"architecture/serverless-sql/serverless-overview/#schema-design","title":"Schema Design","text":"<ul> <li>Use appropriate data types</li> <li>Implement proper statistics</li> <li>Use meaningful column names</li> <li>Plan for schema evolution</li> </ul>"},{"location":"architecture/serverless-sql/serverless-overview/#performance","title":"Performance","text":"<ul> <li>Use appropriate partitioning</li> <li>Implement proper indexing</li> <li>Use query hints when needed</li> <li>Regularly update statistics</li> </ul>"},{"location":"architecture/serverless-sql/serverless-overview/#security","title":"Security","text":"<ul> <li>Implement proper RBAC</li> <li>Use row-level security</li> <li>Regularly audit access</li> <li>Use secure connection strings</li> </ul>"},{"location":"architecture/serverless-sql/serverless-overview/#code-examples","title":"Code Examples","text":""},{"location":"architecture/serverless-sql/serverless-overview/#creating-external-tables","title":"Creating External Tables","text":"<pre><code>CREATE EXTERNAL TABLE my_table\nWITH (\n    LOCATION = 'abfss://container@storageaccount.dfs.core.windows.net/path',\n    DATA_SOURCE = my_datasource,\n    FILE_FORMAT = parquet_format\n)\nAS SELECT * FROM source_table\n</code></pre>"},{"location":"architecture/serverless-sql/serverless-overview/#creating-views","title":"Creating Views","text":"<pre><code>CREATE VIEW secure_view\nWITH (NOEXPAND)\nAS\nSELECT * FROM my_table\nWHERE sensitive_column = 'public'\n</code></pre>"},{"location":"architecture/serverless-sql/serverless-overview/#query-optimization","title":"Query Optimization","text":"<pre><code>SELECT /*+ PUSHDOWN */\n    customer_id,\n    COUNT(*) as order_count\nFROM orders\nWHERE order_date &gt;= '2024-01-01'\nGROUP BY customer_id\n</code></pre>"},{"location":"architecture/serverless-sql/serverless-overview/#next-steps","title":"Next Steps","text":"<ol> <li>Shared Metadata Architecture</li> <li>Best Practices</li> <li>Code Examples</li> <li>Security Guide</li> </ol>"},{"location":"architecture/shared-metadata/","title":"Index","text":"<p>Home &gt; Architecture &gt; Shared Metadata</p>"},{"location":"architecture/shared-metadata/#azure-synapse-analytics-shared-metadata","title":"Azure Synapse Analytics Shared Metadata","text":"<p>Azure Synapse Analytics provides a powerful shared metadata architecture that enables seamless integration between different compute engines, including Apache Spark pools and serverless SQL pools. This section provides in-depth documentation on the shared metadata capabilities, architecture, and best practices.</p>"},{"location":"architecture/shared-metadata/#documentation","title":"Documentation","text":"<ul> <li>Shared Metadata Architecture Overview - Comprehensive guide to the shared metadata architecture, including key components, security model, and best practices.</li> <li>Visual Guides and Diagrams - Visual representations of serverless replicated databases, three-part naming concepts, and layered data architecture.</li> <li>Code Examples - Detailed code samples for implementing shared metadata patterns in Azure Synapse Analytics.</li> </ul>"},{"location":"architecture/shared-metadata/#key-features","title":"Key Features","text":"<ul> <li>Single metadata store for multiple compute engines</li> <li>Consistent schema definition across Spark and SQL</li> <li>Unified data governance and lineage</li> <li>Streamlined cross-engine workloads</li> <li>Simplified DevOps management</li> </ul>"},{"location":"architecture/shared-metadata/#related-resources","title":"Related Resources","text":"<ul> <li>Best Practices for Metadata Management</li> <li>Code Examples</li> <li>Reference Documentation</li> </ul>"},{"location":"architecture/shared-metadata/shared-metadata-examples/","title":"Azure Synapse Shared Metadata - Code Examples","text":"<p>Home &gt; Architecture &gt; Shared Metadata &gt; Code Examples</p> <p>This document provides practical code examples for implementing the shared metadata architecture in Azure Synapse Analytics, focusing on serverless replicated databases, three-part naming solutions, and best practices for implementing layered architectures.</p>"},{"location":"architecture/shared-metadata/shared-metadata-examples/#creating-and-synchronizing-databases-between-spark-and-serverless-sql","title":"Creating and Synchronizing Databases Between Spark and Serverless SQL","text":""},{"location":"architecture/shared-metadata/shared-metadata-examples/#creating-a-database-and-table-in-spark","title":"Creating a Database and Table in Spark","text":"<pre><code># In a Spark notebook\n# Create a new database\nspark.sql(\"CREATE DATABASE IF NOT EXISTS sales_db\")\n\n# Create a table using Parquet format (will be synchronized to SQL)\nspark.sql(\"\"\"\nCREATE TABLE IF NOT EXISTS sales_db.transactions (\n    transaction_id STRING,\n    customer_id STRING,\n    product_id STRING,\n    quantity INT,\n    price DECIMAL(10,2),\n    transaction_date DATE,\n    store_id STRING\n) USING PARQUET\n\"\"\")\n\n# Insert sample data\nspark.sql(\"\"\"\nINSERT INTO sales_db.transactions VALUES \n('T1001', 'C100', 'P5001', 2, 120.50, '2023-02-15', 'S001'),\n('T1002', 'C102', 'P5002', 1, 89.99, '2023-02-15', 'S002'),\n('T1003', 'C100', 'P5003', 3, 25.25, '2023-02-16', 'S001'),\n('T1004', 'C103', 'P5001', 1, 120.50, '2023-02-16', 'S003')\n\"\"\")\n</code></pre>"},{"location":"architecture/shared-metadata/shared-metadata-examples/#accessing-the-synchronized-table-from-serverless-sql","title":"Accessing the Synchronized Table from Serverless SQL","text":"<pre><code>-- Connect to Serverless SQL Pool\n-- The database has been automatically created and synchronized\n\n-- View available tables in the synchronized database\nUSE sales_db;\nSELECT * FROM sys.tables;\n\n-- Query the synchronized table\n-- Note the \"dbo\" schema - tables appear in the dbo schema in SQL\nSELECT * \nFROM sales_db.dbo.transactions\nWHERE transaction_date = '2023-02-15';\n\n-- Using three-part naming\nSELECT t.customer_id, SUM(t.price * t.quantity) AS total_spent\nFROM sales_db.dbo.transactions t\nGROUP BY t.customer_id\nORDER BY total_spent DESC;\n</code></pre>"},{"location":"architecture/shared-metadata/shared-metadata-examples/#working-with-delta-tables","title":"Working with Delta Tables","text":"<pre><code># In a Spark notebook\n# Create a Delta table (will be synchronized to SQL)\nspark.sql(\"CREATE DATABASE IF NOT EXISTS inventory_db\")\n\nspark.sql(\"\"\"\nCREATE TABLE IF NOT EXISTS inventory_db.product_inventory (\n    product_id STRING,\n    product_name STRING,\n    category STRING,\n    quantity_on_hand INT,\n    reorder_level INT,\n    last_updated TIMESTAMP\n) USING DELTA\n\"\"\")\n\n# Insert sample data\nspark.sql(\"\"\"\nINSERT INTO inventory_db.product_inventory VALUES \n('P5001', 'Premium Widget', 'Widgets', 350, 100, current_timestamp()),\n('P5002', 'Standard Widget', 'Widgets', 500, 150, current_timestamp()),\n('P5003', 'Economy Gadget', 'Gadgets', 275, 75, current_timestamp()),\n('P5004', 'Premium Gadget', 'Gadgets', 120, 50, current_timestamp())\n\"\"\")\n\n# Update data - these changes will be synchronized to SQL\nspark.sql(\"\"\"\nUPDATE inventory_db.product_inventory \nSET quantity_on_hand = 300, last_updated = current_timestamp()\nWHERE product_id = 'P5001'\n\"\"\")\n</code></pre>"},{"location":"architecture/shared-metadata/shared-metadata-examples/#querying-delta-table-from-serverless-sql","title":"Querying Delta Table from Serverless SQL","text":"<pre><code>-- Delta tables are also synchronized (in preview)\nSELECT * FROM inventory_db.dbo.product_inventory\nWHERE category = 'Widgets';\n\n-- Join with the sales data from another database\nSELECT \n    i.product_id,\n    i.product_name,\n    i.quantity_on_hand,\n    SUM(t.quantity) AS quantity_sold,\n    SUM(t.price * t.quantity) AS total_revenue\nFROM inventory_db.dbo.product_inventory i\nJOIN sales_db.dbo.transactions t ON i.product_id = t.product_id\nGROUP BY \n    i.product_id,\n    i.product_name,\n    i.quantity_on_hand\nORDER BY total_revenue DESC;\n</code></pre>"},{"location":"architecture/shared-metadata/shared-metadata-examples/#managing-schema-evolution","title":"Managing Schema Evolution","text":""},{"location":"architecture/shared-metadata/shared-metadata-examples/#adding-columns-in-spark-synchronized-to-sql","title":"Adding Columns in Spark (Synchronized to SQL)","text":"<pre><code># Add a column to existing table in Spark\nspark.sql(\"\"\"\nALTER TABLE sales_db.transactions \nADD COLUMN payment_method STRING\n\"\"\")\n\n# Update the new column\nspark.sql(\"\"\"\nUPDATE sales_db.transactions\nSET payment_method = \n    CASE \n        WHEN transaction_id = 'T1001' THEN 'Credit Card'\n        WHEN transaction_id = 'T1002' THEN 'Cash'\n        WHEN transaction_id = 'T1003' THEN 'Credit Card'\n        WHEN transaction_id = 'T1004' THEN 'Digital Wallet'\n    END\n\"\"\")\n</code></pre>"},{"location":"architecture/shared-metadata/shared-metadata-examples/#querying-updated-schema-in-sql","title":"Querying Updated Schema in SQL","text":"<pre><code>-- The new column is now available in SQL after synchronization\nSELECT \n    transaction_id, \n    customer_id,\n    payment_method,\n    price * quantity AS total\nFROM sales_db.dbo.transactions\nWHERE payment_method = 'Credit Card';\n</code></pre>"},{"location":"architecture/shared-metadata/shared-metadata-examples/#implementing-layered-architecture-with-shared-metadata","title":"Implementing Layered Architecture with Shared Metadata","text":""},{"location":"architecture/shared-metadata/shared-metadata-examples/#raw-layer-direct-access-minimal-shared-metadata","title":"Raw Layer (Direct Access, Minimal Shared Metadata)","text":"<pre><code># In Spark, create a database for raw data\nspark.sql(\"CREATE DATABASE IF NOT EXISTS raw_data\")\n\n# Create external table pointing to raw data files\nspark.sql(\"\"\"\nCREATE TABLE raw_data.customer_raw (\n    customer_data STRING\n) USING CSV\nLOCATION 'abfss://datalake@storageaccount.dfs.core.windows.net/raw/customers/'\nOPTIONS (header 'true', inferSchema 'true')\n\"\"\")\n</code></pre>"},{"location":"architecture/shared-metadata/shared-metadata-examples/#silver-layer-apply-shared-metadata","title":"Silver Layer (Apply Shared Metadata)","text":"<pre><code># Create curated database for transformed/validated data\nspark.sql(\"CREATE DATABASE IF NOT EXISTS silver_db\")\n\n# Transform raw data into structured format with proper data types\nspark.sql(\"\"\"\nCREATE TABLE silver_db.customers\nUSING PARQUET\nAS\nSELECT \n    from_json(customer_data, 'id STRING, name STRING, email STRING, signup_date DATE') AS customer\nFROM raw_data.customer_raw\n\"\"\")\n\n# Flatten the structure for easier access\nspark.sql(\"\"\"\nCREATE TABLE silver_db.customers_flattened\nUSING PARQUET\nAS\nSELECT \n    customer.id AS customer_id,\n    customer.name AS full_name,\n    customer.email,\n    customer.signup_date\nFROM silver_db.customers\n\"\"\")\n</code></pre>"},{"location":"architecture/shared-metadata/shared-metadata-examples/#gold-layer-business-ready-data-with-full-shared-metadata","title":"Gold Layer (Business-Ready Data with Full Shared Metadata)","text":"<pre><code># Create business-ready database\nspark.sql(\"CREATE DATABASE IF NOT EXISTS gold_db\")\n\n# Create business metrics table that joins data from multiple sources\nspark.sql(\"\"\"\nCREATE TABLE gold_db.customer_sales_summary\nUSING DELTA\nAS\nSELECT \n    c.customer_id,\n    c.full_name,\n    c.email,\n    COUNT(t.transaction_id) AS total_transactions,\n    SUM(t.price * t.quantity) AS total_spent,\n    MAX(t.transaction_date) AS last_purchase_date\nFROM silver_db.customers_flattened c\nLEFT JOIN sales_db.transactions t ON c.customer_id = t.customer_id\nGROUP BY c.customer_id, c.full_name, c.email\n\"\"\")\n</code></pre>"},{"location":"architecture/shared-metadata/shared-metadata-examples/#accessing-the-layered-architecture-from-sql","title":"Accessing the Layered Architecture from SQL","text":"<pre><code>-- Raw layer is typically accessed directly in Spark, not via shared metadata\n\n-- Silver layer via shared metadata\nSELECT * FROM silver_db.dbo.customers_flattened\nWHERE signup_date &gt;= '2023-01-01';\n\n-- Gold layer via shared metadata\nSELECT \n    customer_id,\n    full_name,\n    total_transactions,\n    total_spent,\n    CASE \n        WHEN total_spent &gt; 1000 THEN 'Premium'\n        WHEN total_spent &gt; 500 THEN 'Standard'\n        ELSE 'Basic'\n    END AS customer_tier\nFROM gold_db.dbo.customer_sales_summary\nORDER BY total_spent DESC;\n</code></pre>"},{"location":"architecture/shared-metadata/shared-metadata-examples/#working-with-manual-external-tables-for-non-synchronized-formats","title":"Working with Manual External Tables for Non-Synchronized Formats","text":"<p>If you have data in formats not automatically synchronized from Spark (like JSON, ORC), you can manually create external tables in serverless SQL:</p> <pre><code>-- Create an external data source if you don't have one\nCREATE DATABASE scoped CREDENTIAL [SasCredential]\nWITH IDENTITY='SHARED ACCESS SIGNATURE',\nSECRET = 'sv=2020-02-10&amp;ss=bfqt&amp;srt=sco&amp;sp=rwdlacupx&amp;se=2023-04-15T01:15:28Z&amp;st=2021-03-15T17:15:28Z&amp;spr=https&amp;sig=XXXXX'\n\nCREATE EXTERNAL DATA SOURCE ExternalDataSource\nWITH (\n    LOCATION = 'https://storageaccount.dfs.core.windows.net/datalake',\n    CREDENTIAL = [SasCredential]\n)\n\n-- Create an external file format for JSON\nCREATE EXTERNAL FILE FORMAT JsonFormat\nWITH (\n    FORMAT_TYPE = JSON\n)\n\n-- Create an external table for JSON data\nCREATE EXTERNAL TABLE external_db.customer_preferences (\n    customer_id VARCHAR(50),\n    preferences NVARCHAR(MAX)\n)\nWITH (\n    LOCATION = '/analytics/customer-preferences/',\n    DATA_SOURCE = ExternalDataSource,\n    FILE_FORMAT = JsonFormat\n)\n</code></pre>"},{"location":"architecture/shared-metadata/shared-metadata-examples/#monitoring-metadata-synchronization","title":"Monitoring Metadata Synchronization","text":"<pre><code>-- Check if tables have been synchronized correctly\nUSE sales_db;\nSELECT \n    name, \n    create_date, \n    modify_date,\n    type_desc\nFROM sys.tables;\n\n-- Check external data sources\nSELECT * FROM sys.external_data_sources;\n\n-- Check external file formats\nSELECT * FROM sys.external_file_formats;\n\n-- View column definitions\nSELECT \n    t.name AS table_name,\n    c.name AS column_name,\n    ty.name AS data_type,\n    c.max_length,\n    c.precision,\n    c.scale,\n    c.is_nullable\nFROM sys.tables t\nJOIN sys.columns c ON t.object_id = c.object_id\nJOIN sys.types ty ON c.user_type_id = ty.user_type_id\nWHERE t.name = 'transactions'\nORDER BY c.column_id;\n</code></pre> <p>These code examples demonstrate how to implement the shared metadata architecture in Azure Synapse Analytics using best practices for serverless replicated databases, handling three-part naming, and implementing a layered data architecture.</p>"},{"location":"architecture/shared-metadata/shared-metadata-visuals/","title":"Azure Synapse Shared Metadata Architecture - Visual Guides","text":"<p>Home &gt; Architecture &gt; Shared Metadata &gt; Visual Guides</p>"},{"location":"architecture/shared-metadata/shared-metadata-visuals/#serverless-replicated-database-synchronization","title":"Serverless Replicated Database Synchronization","text":"<pre><code>sequenceDiagram\n    participant Spark as Apache Spark Pool\n    participant MetaStore as Spark Metastore\n    participant SyncService as Metadata Sync Service\n    participant SQLPool as Serverless SQL Pool\n\n    Spark-&gt;&gt;MetaStore: Create database (mydb)\n    MetaStore--&gt;&gt;Spark: Database created\n    Note over MetaStore: Database stored in metastore\n    MetaStore-&gt;&gt;SyncService: Notify new database\n    SyncService-&gt;&gt;SQLPool: Create corresponding database\n    Note over SQLPool: Database 'mydb' created in SQL Pool\n\n    Spark-&gt;&gt;MetaStore: Create table (mydb.mytable) USING PARQUET\n    MetaStore--&gt;&gt;Spark: Table created\n    Note over MetaStore: Table metadata stored in metastore\n    MetaStore-&gt;&gt;SyncService: Notify new table\n    SyncService-&gt;&gt;SQLPool: Create external table\n    Note over SQLPool: External table 'mydb.dbo.mytable' created\n\n    Spark-&gt;&gt;MetaStore: Update table schema\n    MetaStore--&gt;&gt;Spark: Schema updated\n    MetaStore-&gt;&gt;SyncService: Notify schema change\n    SyncService-&gt;&gt;SQLPool: Update external table schema\n    Note over SQLPool: External table schema updated (async)\n</code></pre>"},{"location":"architecture/shared-metadata/shared-metadata-visuals/#three-part-naming-limitations-and-workarounds","title":"Three-Part Naming Limitations and Workarounds","text":"<pre><code>graph TD\n    subgraph \"Spark Environment\"\n        SparkDB1[Spark Database 1]\n        SparkDB2[Spark Database 2]\n        SparkTable1[Table 1 - Parquet]\n        SparkTable2[Table 2 - Delta]\n        SparkTable3[Table 3 - CSV]\n        SparkTable4[Table 4 - JSON]\n        SparkView[Spark View]\n\n        SparkDB1 --&gt; SparkTable1\n        SparkDB1 --&gt; SparkTable2\n        SparkDB2 --&gt; SparkTable3\n        SparkDB2 --&gt; SparkTable4\n        SparkDB1 --&gt; SparkView\n    end\n\n    subgraph \"Serverless SQL Environment\"\n        SQLDB1[SQL Database 1]\n        SQLDB2[SQL Database 2]\n        SQLTable1[External Table 1]\n        SQLTable2[External Table 2]\n        SQLTable3[External Table 3]\n\n        SQLDB1 --&gt; SQLTable1\n        SQLDB1 --&gt; SQLTable2\n        SQLDB2 --&gt; SQLTable3\n    end\n\n    %% Sync relationships\n    SparkTable1 -.Sync.-&gt; SQLTable1\n    SparkTable2 -.Sync.-&gt; SQLTable2\n    SparkTable3 -.Sync.-&gt; SQLTable3\n\n    %% Not synced\n    SparkTable4 -. Not Synced .-&gt; Limitations([JSON format not supported])\n    SparkView -. Not Synced .-&gt; Limitations2([Views require Spark engine])\n\n    %% Three-part naming\n    ThreePart[Three-part naming: database.schema.table]\n    ThreePart --&gt; SQLAccess[SQL: USE database; SELECT * FROM schema.table]\n    ThreePart --&gt; SparkAccess[Spark: SELECT * FROM database.table]\n\n    %% Workaround\n    Workaround[Workaround Pattern]\n    Workaround --&gt; Step1[1. Create tables in Spark with supported formats]\n    Step1 --&gt; Step2[2. Let tables sync to serverless SQL]\n    Step2 --&gt; Step3[3. Use database.dbo.table in SQL queries]\n</code></pre>"},{"location":"architecture/shared-metadata/shared-metadata-visuals/#layered-data-architecture-with-shared-metadata","title":"Layered Data Architecture with Shared Metadata","text":"<pre><code>graph TD\n    Storage[ADLS Gen2 Storage]\n\n    subgraph \"Data Layers\"\n        Raw[Raw Layer]\n        Silver[Silver/Curated Layer]\n        Gold[Gold/Business Layer]\n\n        Storage --&gt; Raw\n        Raw --&gt; Silver\n        Silver --&gt; Gold\n    end\n\n    subgraph \"Engine Access Patterns\"\n        SparkRaw[Direct Spark access]\n        SQLRaw[Direct SQL access]\n\n        SparkSilver[Spark with metadata sync]\n        SQLSilver[SQL with metadata sync]\n\n        SparkGold[Full shared metadata]\n        SQLGold[Full shared metadata]\n\n        Raw --&gt; SparkRaw\n        Raw --&gt; SQLRaw\n\n        Silver --&gt; SparkSilver\n        Silver --&gt; SQLSilver\n\n        Gold --&gt; SparkGold\n        Gold --&gt; SQLGold\n    end\n\n    subgraph \"Recommendations\"\n        RecRaw[Minimal shared metadata]\n        RecSilver[Begin applying shared metadata]\n        RecGold[Fully leverage shared metadata]\n\n        SparkRaw --&gt; RecRaw\n        SQLRaw --&gt; RecRaw\n\n        SparkSilver --&gt; RecSilver\n        SQLSilver --&gt; RecSilver\n\n        SparkGold --&gt; RecGold\n        SQLGold --&gt; RecGold\n    end\n</code></pre>"},{"location":"architecture/shared-metadata/shared-metadata-visuals/#creating-and-accessing-synchronized-tables-process-flow","title":"Creating and Accessing Synchronized Tables - Process Flow","text":"<pre><code>flowchart TD\n    Start([Start]) --&gt; CreateDB[Create Database in Spark]\n    CreateDB --&gt; CreateTable[Create Table in Spark using Parquet/Delta/CSV]\n    CreateTable --&gt; InsertData[Insert Data in Spark]\n    InsertData --&gt; Wait[Wait for Async Sync ~few seconds]\n    Wait --&gt; QuerySQL[Query from Serverless SQL Pool]\n\n    QuerySQL --&gt; UseCase1[Use Case: Analytics]\n    QuerySQL --&gt; UseCase2[Use Case: Reporting]\n    QuerySQL --&gt; UseCase3[Use Case: Data Exploration]\n\n    subgraph \"Code Examples\"\n        SparkCode[\"\n        // Spark SQL\n        CREATE DATABASE mydb;\n\n        CREATE TABLE mydb.sales (\n            id INT,\n            date DATE,\n            amount DOUBLE,\n            customer STRING\n        ) USING PARQUET;\n\n        INSERT INTO mydb.sales \n        VALUES (1, '2023-01-15', 199.99, 'Contoso');\n        \"]\n\n        SQLCode[\"\n        -- Serverless SQL Pool\n        USE mydb;\n\n        -- View available tables\n        SELECT * FROM sys.tables;\n\n        -- Query synchronized table\n        SELECT * FROM mydb.dbo.sales\n        WHERE date &gt;= '2023-01-01';\n        \"]\n    end\n\n    UseCase1 --&gt; SparkCode\n    UseCase2 --&gt; SQLCode\n</code></pre>"},{"location":"architecture/shared-metadata/shared-metadata/","title":"Shared metadata","text":"<p>Home &gt; Architecture &gt; Shared Metadata Architecture</p>"},{"location":"architecture/shared-metadata/shared-metadata/#azure-synapse-shared-metadata-architecture","title":"Azure Synapse Shared Metadata Architecture","text":""},{"location":"architecture/shared-metadata/shared-metadata/#overview","title":"Overview","text":"<p>The shared metadata architecture in Azure Synapse Analytics enables seamless integration between different compute engines while maintaining a single source of truth for your data. This architecture is crucial for maintaining consistency across your analytics environment and supports the modern data warehouse pattern by allowing different processing engines to collaborate efficiently.</p>"},{"location":"architecture/shared-metadata/shared-metadata/#key-components","title":"Key Components","text":""},{"location":"architecture/shared-metadata/shared-metadata/#1-unified-metadata-layer","title":"1. Unified Metadata Layer","text":"<ul> <li>Single metadata store</li> <li>Consistent schema across engines</li> <li>Centralized security</li> <li>Version control</li> </ul>"},{"location":"architecture/shared-metadata/shared-metadata/#2-metadata-synchronization","title":"2. Metadata Synchronization","text":"<ul> <li>Automatic synchronization</li> <li>Schema evolution tracking</li> <li>Data lineage</li> <li>Impact analysis</li> </ul>"},{"location":"architecture/shared-metadata/shared-metadata/#3-security-integration","title":"3. Security Integration","text":"<ul> <li>Unified access control</li> <li>Row-level security</li> <li>Column-level security</li> <li>Audit logging</li> </ul>"},{"location":"architecture/shared-metadata/shared-metadata/#architecture-diagram","title":"Architecture Diagram","text":"<pre><code>graph TD\n    Metadata[Metadata Store] --&gt; Serverless[Serverless SQL]\n    Metadata --&gt; Spark[Spark Pool]\n    Metadata --&gt; Dedicated[Dedicated SQL]\n\n    subgraph \"Metadata Services\"\n        Stats[Statistics]\n        Lineage[Data Lineage]\n        Security[Security]\n    end\n\n    subgraph \"Compute Engines\"\n        Serverless --&gt; Metadata\n        Spark --&gt; Metadata\n        Dedicated --&gt; Metadata\n    end\n\n    subgraph \"Storage\"\n        ADLS[ADLS Gen2]\n        Delta[Delta Lake]\n    end\n</code></pre>"},{"location":"architecture/shared-metadata/shared-metadata/#best-practices","title":"Best Practices","text":""},{"location":"architecture/shared-metadata/shared-metadata/#schema-management","title":"Schema Management","text":"<ul> <li>Use consistent naming conventions</li> <li>Implement proper schema evolution</li> <li>Regularly update statistics</li> <li>Use appropriate data types</li> </ul>"},{"location":"architecture/shared-metadata/shared-metadata/#security","title":"Security","text":"<ul> <li>Implement proper RBAC</li> <li>Use row-level security</li> <li>Regularly audit changes</li> <li>Use secure connection strings</li> </ul>"},{"location":"architecture/shared-metadata/shared-metadata/#performance","title":"Performance","text":"<ul> <li>Use appropriate partitioning</li> <li>Implement proper indexing</li> <li>Use query hints when needed</li> <li>Regularly update statistics</li> </ul>"},{"location":"architecture/shared-metadata/shared-metadata/#code-examples","title":"Code Examples","text":""},{"location":"architecture/shared-metadata/shared-metadata/#creating-a-table-with-shared-metadata","title":"Creating a Table with Shared Metadata","text":"<pre><code>CREATE TABLE my_table\nWITH (\n    LOCATION = 'abfss://container@storageaccount.dfs.core.windows.net/path',\n    DATA_SOURCE = my_datasource,\n    FILE_FORMAT = parquet_format\n)\nAS SELECT * FROM source_table\n</code></pre>"},{"location":"architecture/shared-metadata/shared-metadata/#schema-evolution","title":"Schema Evolution","text":"<pre><code>-- Add column\nALTER TABLE my_table ADD COLUMNS (new_column INT)\n\n-- Rename column\nALTER TABLE my_table RENAME COLUMN old_name TO new_name\n\n-- Drop column\nALTER TABLE my_table DROP COLUMN column_name\n</code></pre>"},{"location":"architecture/shared-metadata/shared-metadata/#security-management","title":"Security Management","text":"<pre><code>-- Grant permissions\nGRANT SELECT ON my_table TO [user]\n\n-- Row-level security\nCREATE SECURITY POLICY my_policy\nADD FILTER PREDICATE my_function(user_id)\nON my_table\n</code></pre>"},{"location":"architecture/shared-metadata/shared-metadata/#serverless-replicated-databases","title":"Serverless Replicated Databases","text":"<p>Serverless replicated databases are a key feature of the shared metadata architecture in Azure Synapse Analytics. These databases are created automatically in the serverless SQL pool when corresponding databases are created in Spark pools.</p>"},{"location":"architecture/shared-metadata/shared-metadata/#how-serverless-replicated-databases-work","title":"How Serverless Replicated Databases Work","text":"<ol> <li>When a database is created in a Spark pool, a corresponding database is automatically created in the serverless SQL pool.</li> <li>Tables created in Spark using Parquet, Delta Lake, or CSV formats are exposed as external tables in the serverless SQL pool.</li> <li>The synchronization happens asynchronously, typically with a delay of a few seconds.</li> <li>Tables appear in the <code>dbo</code> schema of the corresponding database in the serverless SQL pool.</li> <li>The maximum number of databases synchronized from Apache Spark pools is not limited, but serverless SQL pools can have up to 100 additional (non-synchronized) databases.</li> </ol>"},{"location":"architecture/shared-metadata/shared-metadata/#limitations-of-serverless-replicated-databases","title":"Limitations of Serverless Replicated Databases","text":"<ul> <li>Read-Only Access: Replicated databases in serverless SQL are read-only due to the asynchronous nature of metadata synchronization from Spark.</li> <li>Format Restrictions: Only tables using Parquet, Delta Lake (preview), or CSV formats are synchronized; other formats are not automatically available.</li> <li>Asynchronous Updates: Changes in Spark metadata are propagated to SQL with a short delay.</li> <li>Spark Views: Spark views require a Spark engine to process and cannot be accessed from SQL engines.</li> </ul>"},{"location":"architecture/shared-metadata/shared-metadata/#three-part-naming-support-and-limitations","title":"Three-Part Naming Support and Limitations","text":"<p>Three-part naming (database.schema.table) is an important feature for cross-database queries but has specific limitations in both Spark and serverless SQL environments.</p>"},{"location":"architecture/shared-metadata/shared-metadata/#three-part-naming-in-serverless-sql","title":"Three-Part Naming in Serverless SQL","text":"<ul> <li>Serverless SQL pools support three-part name references and cross-database queries, including the <code>USE</code> statement.</li> <li>Queries can reference serverless SQL databases or Lake databases (replicated from Spark) within the same workspace.</li> <li>Cross-workspace queries are not supported.</li> </ul>"},{"location":"architecture/shared-metadata/shared-metadata/#three-part-naming-in-spark","title":"Three-Part Naming in Spark","text":"<ul> <li>Spark has more restrictive three-part naming support compared to traditional SQL environments.</li> <li>In Spark, databases and schemas are treated as the same concept, which limits the traditional three-part naming convention.</li> <li>Using fully qualified names (database.schema.table) may not work as expected in certain Spark operations.</li> </ul>"},{"location":"architecture/shared-metadata/shared-metadata/#workarounds-for-three-part-naming-limitations","title":"Workarounds for Three-Part Naming Limitations","text":""},{"location":"architecture/shared-metadata/shared-metadata/#managed-serverless-databases-with-spark-schema-synchronization","title":"Managed Serverless Databases with Spark Schema Synchronization","text":"<p>A recommended pattern to overcome three-part naming limitations is to create managed serverless databases that leverage Spark database schemas:</p> <ol> <li>Create and design tables in Spark using appropriate formats (Parquet, Delta, CSV).</li> <li>Let these tables automatically synchronize to serverless SQL.</li> <li>Use schema isolation in Spark (which treats schemas the same as databases) for logical separation.</li> <li>Access the synchronized tables in serverless SQL using database.dbo.table naming convention.</li> </ol>"},{"location":"architecture/shared-metadata/shared-metadata/#auto-creation-of-external-tables-in-serverless-sql","title":"Auto-Creation of External Tables in Serverless SQL","text":"<p>To maintain schema synchronization between Spark and serverless SQL:</p> <ol> <li>Define your schema and tables in Spark pools using supported formats.</li> <li>Allow automatic synchronization to create corresponding external tables in serverless SQL.</li> <li>For formats not automatically synchronized, create manual external tables in serverless SQL pointing to the same underlying storage.</li> </ol> <pre><code>-- Example: Creating a table in Spark that will sync to serverless SQL\n-- In Spark:\nCREATE TABLE mydb.mytable (id INT, name STRING, data STRING) USING PARQUET\n\n-- After sync, access in serverless SQL:\nSELECT * FROM mydb.dbo.mytable\n</code></pre>"},{"location":"architecture/shared-metadata/shared-metadata/#best-practices-for-layered-data-architecture","title":"Best Practices for Layered Data Architecture","text":"<ul> <li>Raw Data Layer: Minimal processing, typically accessed directly through specific engines without relying on shared metadata.</li> <li>Silver Layer (Curated): Apply three-part naming and schema synchronization here for clean, transformed data.</li> <li>Gold Layer (Business): Fully leverage synchronized metadata for business-ready data models across engines.</li> </ul> <p>This layered approach ensures that metadata synchronization complexity is applied where it adds the most value, rather than in raw data layers where direct access patterns may be more efficient.</p>"},{"location":"architecture/shared-metadata/shared-metadata/#next-steps","title":"Next Steps","text":"<ol> <li>Delta Lakehouse Architecture</li> <li>Serverless SQL Architecture</li> <li>Best Practices</li> <li>Code Examples</li> </ol>"},{"location":"assets/images/","title":"Image Assets for Azure Synapse Analytics Documentation","text":"<p>This directory contains diagrams and images for the Azure Synapse Analytics documentation.</p>"},{"location":"assets/images/#required-diagrams","title":"Required Diagrams","text":"<p>The following diagrams are referenced in the documentation and should be created:</p> <ol> <li>delta-lakehouse-diagram.png - Architecture diagram for the Delta Lakehouse pattern</li> <li>serverless-sql-architecture.png - Architecture diagram for the Serverless SQL pattern</li> <li>shared-metadata-architecture.png - Architecture diagram for the Shared Metadata pattern</li> <li>microsoft-logo.png - Microsoft logo for the documentation header</li> <li>favicon.ico - Favicon for the documentation site</li> </ol>"},{"location":"assets/images/#design-guidelines","title":"Design Guidelines","text":"<p>When creating these diagrams, please follow these guidelines:</p> <ul> <li>Use the Azure architecture icons from the Azure Architecture Center</li> <li>Use a consistent color palette aligned with Azure branding</li> <li>Include clear labels for all components</li> <li>Add directional arrows to show data flow</li> <li>Include a legend if needed for complex diagrams</li> <li>Export as PNG with transparent background</li> <li>Target resolution: 1280x720 pixels (16:9 aspect ratio)</li> </ul>"},{"location":"assets/images/#tools","title":"Tools","text":"<p>Recommended tools for creating these diagrams:</p> <ul> <li>Draw.io with the Azure icon set</li> <li>PowerPoint with the Azure Architecture templates</li> <li>Figma with Azure UI kits</li> </ul>"},{"location":"assets/images/#examples","title":"Examples","text":"<p>For examples of well-designed Azure architecture diagrams, refer to:</p> <ul> <li>Azure Architecture Center</li> <li>Azure Synapse Analytics documentation</li> </ul>"},{"location":"best-practices/cost-optimization/","title":"Cost Optimization","text":"<p>Home &gt; Best Practices &gt; Cost Optimization</p>"},{"location":"best-practices/cost-optimization/#cost-optimization-best-practices-for-azure-synapse-analytics","title":"Cost Optimization Best Practices for Azure Synapse Analytics","text":""},{"location":"best-practices/cost-optimization/#understanding-synapse-analytics-cost-model","title":"Understanding Synapse Analytics Cost Model","text":""},{"location":"best-practices/cost-optimization/#cost-components","title":"Cost Components","text":""},{"location":"best-practices/cost-optimization/#serverless-sql-pool-costs","title":"Serverless SQL Pool Costs","text":"<ul> <li>Data Scanning: Charged per TB of data processed</li> <li>Result Caching: No charge for subsequent queries using cached results</li> <li>Resource Management: No charge when idle (pay-per-query model)</li> </ul>"},{"location":"best-practices/cost-optimization/#dedicated-sql-pool-costs","title":"Dedicated SQL Pool Costs","text":"<ul> <li>Compute Costs: Based on Data Warehouse Units (DWU) and time running</li> <li>Storage Costs: Based on volume of data stored in the dedicated pool</li> <li>Data Movement: Included in compute costs</li> </ul>"},{"location":"best-practices/cost-optimization/#spark-pool-costs","title":"Spark Pool Costs","text":"<ul> <li>Compute Costs: Based on vCore-hours consumed</li> <li>Autoscale Impact: Costs vary based on actual usage with autoscale</li> <li>Node Types: Different costs for different node types (memory-optimized vs. compute-optimized)</li> </ul>"},{"location":"best-practices/cost-optimization/#storage-costs","title":"Storage Costs","text":"<ul> <li>ADLS Gen2 Storage: Based on volume of data and storage tier (hot/cool/archive)</li> <li>Transaction Costs: Based on number and type of storage operations</li> </ul>"},{"location":"best-practices/cost-optimization/#compute-optimization-strategies","title":"Compute Optimization Strategies","text":""},{"location":"best-practices/cost-optimization/#serverless-sql-pool-optimization","title":"Serverless SQL Pool Optimization","text":""},{"location":"best-practices/cost-optimization/#query-optimization","title":"Query Optimization","text":"<ul> <li> <p>Minimize Data Scanning: Prune data aggressively   <pre><code>-- Good: Scans less data with partition filtering\nSELECT * FROM external_table\nWHERE year_partition = 2025 AND month_partition = 1\n\n-- Avoid: Full scan across all partitions\nSELECT * FROM external_table\nWHERE YEAR(transaction_date) = 2025 AND MONTH(transaction_date) = 1\n</code></pre></p> </li> <li> <p>Use Appropriate File Formats: Prefer columnar formats (Parquet, ORC) over row-based formats (CSV, JSON)   <pre><code>-- Create external file format for Parquet\nCREATE EXTERNAL FILE FORMAT ParquetFormat\nWITH (\n    FORMAT_TYPE = PARQUET,\n    DATA_COMPRESSION = 'SNAPPY'\n);\n</code></pre></p> </li> <li> <p>Statistics: Create statistics on frequently filtered columns   <pre><code>-- Create statistics for better query plans\nCREATE STATISTICS stats_year ON external_table(year_column);\n</code></pre></p> </li> </ul>"},{"location":"best-practices/cost-optimization/#result-set-caching","title":"Result Set Caching","text":"<ul> <li> <p>Enable Result Set Caching: Reuse query results for identical queries   <pre><code>-- Enable result set caching at database level\nALTER DATABASE MyDatabase\nSET RESULT_SET_CACHING ON;\n</code></pre></p> </li> <li> <p>Parameterize Queries: Use parameterized queries to maximize cache hits</p> </li> </ul>"},{"location":"best-practices/cost-optimization/#dedicated-sql-pool-optimization","title":"Dedicated SQL Pool Optimization","text":""},{"location":"best-practices/cost-optimization/#scale-management","title":"Scale Management","text":"<ul> <li> <p>Implement Automated Scaling: Scale up/down based on workload patterns   <pre><code># Scale DW based on schedule\n$startTime = (Get-Date).AddHours(1)\n$timeZone = [System.TimeZoneInfo]::Local.Id\n$schedule = New-AzSynapseWorkspaceManagedSchedule -DayOfWeek Monday, Tuesday, Wednesday, Thursday, Friday -Time \"08:00\" -TimeZone $timeZone\nNew-AzSynapseSqlPoolWorkloadManagement -WorkspaceName $workspaceName -SqlPoolName $sqlPoolName -DwuValue 1000 -Schedule $schedule\n</code></pre></p> </li> <li> <p>Pause During Inactivity: Automatically pause during non-business hours   <pre><code># Pause SQL pool\nSuspend-AzSynapseSqlPool -WorkspaceName $workspaceName -Name $sqlPoolName\n</code></pre></p> </li> </ul>"},{"location":"best-practices/cost-optimization/#resource-classes","title":"Resource Classes","text":"<ul> <li>Optimize Resource Classes: Use smaller resource classes for simple queries   <pre><code>-- Assign smaller resource class for simple queries\nEXEC sp_addrolemember 'smallrc', 'username';\n\n-- Assign larger resource class for complex queries\nEXEC sp_addrolemember 'largerc', 'username';\n</code></pre></li> </ul>"},{"location":"best-practices/cost-optimization/#spark-pool-optimization","title":"Spark Pool Optimization","text":""},{"location":"best-practices/cost-optimization/#autoscale-configuration","title":"Autoscale Configuration","text":"<ul> <li> <p>Right-Size Min/Max Nodes: Configure appropriate autoscale range   <pre><code>{\n  \"name\": \"optimizedSparkPool\",\n  \"properties\": {\n    \"nodeSize\": \"Small\",\n    \"nodeSizeFamily\": \"MemoryOptimized\",\n    \"autoScale\": {\n      \"enabled\": true,\n      \"minNodeCount\": 3,\n      \"maxNodeCount\": 10\n    }\n  }\n}\n</code></pre></p> </li> <li> <p>Session-Level Configuration: Only request resources needed for each job   <pre><code># Configure Spark session with appropriate resources\nspark.conf.set(\"spark.executor.instances\", \"4\")\nspark.conf.set(\"spark.executor.memory\", \"4g\")\nspark.conf.set(\"spark.executor.cores\", \"2\")\n</code></pre></p> </li> </ul>"},{"location":"best-practices/cost-optimization/#node-selection","title":"Node Selection","text":"<ul> <li>Use Appropriate Node Types: Select based on workload characteristics</li> <li>Memory-optimized for ML and large joins</li> <li> <p>Compute-optimized for ETL and data processing</p> </li> <li> <p>Consider Job Requirements: Match node size to job requirements</p> </li> </ul>"},{"location":"best-practices/cost-optimization/#session-management","title":"Session Management","text":"<ul> <li>Session Timeout: Configure appropriate timeout to release resources   <pre><code>{\n  \"name\": \"optimizedSparkPool\",\n  \"properties\": {\n    \"sessionLevelPackages\": [],\n    \"sparkConfigProperties\": {},\n    \"nodeSize\": \"Small\",\n    \"nodeSizeFamily\": \"MemoryOptimized\",\n    \"sessionLevelPackages\": [],\n    \"customLibraries\": [],\n    \"sparkEventsFolder\": \"/events\",\n    \"autoScale\": {\n      \"enabled\": true,\n      \"minNodeCount\": 3,\n      \"maxNodeCount\": 10\n    },\n    \"isComputeIsolationEnabled\": false,\n    \"sessionProperties\": {\n      \"driverSize\": \"Small\",\n      \"executorSize\": \"Small\",\n      \"executorCount\": 2\n    },\n    \"defaultSparkLogFolder\": \"/logs\",\n    \"nodeCount\": 0,\n    \"dynamicExecutorAllocation\": {\n      \"enabled\": true,\n      \"minExecutors\": 1,\n      \"maxExecutors\": 5\n    },\n    \"coordinatorSize\": \"Small\",\n    \"provisioningState\": \"Succeeded\"\n  }\n}\n</code></pre></li> </ul>"},{"location":"best-practices/cost-optimization/#storage-optimization-strategies","title":"Storage Optimization Strategies","text":""},{"location":"best-practices/cost-optimization/#data-lifecycle-management","title":"Data Lifecycle Management","text":""},{"location":"best-practices/cost-optimization/#storage-tiering","title":"Storage Tiering","text":"<ul> <li>Hot Storage: Use for frequently accessed data (last 30-90 days)</li> <li>Cool Storage: Use for infrequently accessed data (older than 90 days)</li> <li>Archive Storage: Use for rarely accessed data (compliance/historical)</li> </ul>"},{"location":"best-practices/cost-optimization/#automated-tiering","title":"Automated Tiering","text":"<ul> <li>Lifecycle Management Policies: Configure to automatically move data between tiers   <pre><code>{\n  \"rules\": [\n    {\n      \"enabled\": true,\n      \"name\": \"MoveToCoolTier\",\n      \"type\": \"Lifecycle\",\n      \"definition\": {\n        \"filters\": {\n          \"blobTypes\": [ \"blockBlob\" ],\n          \"prefixMatch\": [ \"data/historical/\" ]\n        },\n        \"actions\": {\n          \"baseBlob\": {\n            \"tierToCool\": { \"daysAfterModificationGreaterThan\": 90 }\n          }\n        }\n      }\n    }\n  ]\n}\n</code></pre></li> </ul>"},{"location":"best-practices/cost-optimization/#data-storage-optimization","title":"Data Storage Optimization","text":""},{"location":"best-practices/cost-optimization/#compression-and-file-formats","title":"Compression and File Formats","text":"<ul> <li> <p>Use Compression: Prefer columnar formats with compression   <pre><code># Write with compression\ndf.write.format(\"parquet\") \\\n    .option(\"compression\", \"snappy\") \\\n    .save(\"/path/to/data\")\n</code></pre></p> </li> <li> <p>Optimize File Sizes: Target 100MB-1GB per file   <pre><code># Control Parquet file size\nspark.conf.set(\"spark.sql.files.maxPartitionBytes\", 134217728)  # 128 MB\n</code></pre></p> </li> </ul>"},{"location":"best-practices/cost-optimization/#data-cleanup","title":"Data Cleanup","text":"<ul> <li>Remove Duplicate Data: Deduplicate data where possible</li> <li> <p>Regular Vacuum: Clean up stale files in Delta tables   <pre><code>-- Remove files no longer needed by the table\nVACUUM delta_table RETAIN 7 DAYS\n</code></pre></p> </li> <li> <p>Temporary Data Management: Remove temporary datasets after use</p> </li> </ul>"},{"location":"best-practices/cost-optimization/#pipeline-optimization","title":"Pipeline Optimization","text":""},{"location":"best-practices/cost-optimization/#integration-pipeline-costs","title":"Integration Pipeline Costs","text":""},{"location":"best-practices/cost-optimization/#activity-optimization","title":"Activity Optimization","text":"<ul> <li>Combine Activities: Reduce activity runs by combining related operations</li> <li>Use Appropriate Integration Runtime: Match the IR to the workload requirements</li> <li>Optimize Copy Activity: Configure appropriate compute size for data movement</li> </ul>"},{"location":"best-practices/cost-optimization/#monitoring-and-debugging","title":"Monitoring and Debugging","text":"<ul> <li>Limit Debug Runs: Use debug runs sparingly</li> <li>Optimize Logging: Implement appropriate logging levels</li> <li>Use Activity Constraints: Set appropriate timeouts and retry policies</li> </ul>"},{"location":"best-practices/cost-optimization/#orchestration-patterns","title":"Orchestration Patterns","text":""},{"location":"best-practices/cost-optimization/#trigger-optimization","title":"Trigger Optimization","text":"<ul> <li>Batch Related Activities: Trigger multiple related activities together</li> <li>Use Event-Based Triggers: Trigger only when needed, rather than on schedule</li> </ul>"},{"location":"best-practices/cost-optimization/#monitoring-and-analysis","title":"Monitoring and Analysis","text":""},{"location":"best-practices/cost-optimization/#cost-monitoring","title":"Cost Monitoring","text":""},{"location":"best-practices/cost-optimization/#azure-cost-management","title":"Azure Cost Management","text":"<ul> <li> <p>Budget Alerts: Set up alerts for cost thresholds   <pre><code># Create budget with alert\nNew-AzConsumptionBudget -Name \"SynapseMonthlyBudget\" `\n    -Amount 1000 `\n    -Category \"Cost\" `\n    -TimeGrain \"Monthly\" `\n    -StartDate (Get-Date) `\n    -EndDate (Get-Date).AddYears(1) `\n    -ContactEmail @(\"user@contoso.com\")\n</code></pre></p> </li> <li> <p>Cost Analysis: Regularly analyze costs by service, resource, and tag</p> </li> <li>Tag Resources: Implement consistent tagging for cost allocation   <pre><code>{\n  \"tags\": {\n    \"Environment\": \"Production\",\n    \"Department\": \"Finance\",\n    \"Project\": \"DataWarehouse\"\n  }\n}\n</code></pre></li> </ul>"},{"location":"best-practices/cost-optimization/#resource-utilization-analysis","title":"Resource Utilization Analysis","text":"<ul> <li>Monitor Usage Patterns: Track usage to identify optimization opportunities</li> <li>Identify Idle Resources: Find and address underutilized resources</li> <li>Workload Analysis: Understand peak vs. average requirements</li> </ul>"},{"location":"best-practices/cost-optimization/#cost-optimization-workflow","title":"Cost Optimization Workflow","text":""},{"location":"best-practices/cost-optimization/#regular-review-process","title":"Regular Review Process","text":"<ul> <li>Monthly Cost Review: Schedule regular cost review meetings</li> <li>Cost Optimization Backlog: Maintain a backlog of optimization opportunities</li> <li>ROI Analysis: Prioritize optimization efforts by potential savings</li> </ul>"},{"location":"best-practices/cost-optimization/#enterprise-strategies","title":"Enterprise Strategies","text":""},{"location":"best-practices/cost-optimization/#reserved-instances","title":"Reserved Instances","text":""},{"location":"best-practices/cost-optimization/#azure-reservations","title":"Azure Reservations","text":"<ul> <li>Reserved Capacity: Consider 1-year or 3-year reservations for stable workloads</li> <li>Reservation Scope: Choose appropriate scope (subscription or resource group)</li> <li>Mixed Approach: Use reserved instances for baseline and pay-as-you-go for variable workloads</li> </ul>"},{"location":"best-practices/cost-optimization/#enterprise-agreement-benefits","title":"Enterprise Agreement Benefits","text":""},{"location":"best-practices/cost-optimization/#ea-optimization","title":"EA Optimization","text":"<ul> <li>Leverage EA Pricing: Utilize enterprise agreement discounts</li> <li>Azure Hybrid Benefit: Apply for eligible workloads</li> <li>Enterprise Dev/Test Subscription: Use for non-production environments</li> </ul>"},{"location":"best-practices/cost-optimization/#conclusion","title":"Conclusion","text":"<p>Cost optimization in Azure Synapse Analytics requires a multi-faceted approach across compute, storage, and operational aspects. By implementing these best practices, organizations can achieve significant cost savings while maintaining performance and meeting business requirements.</p> <p>Remember that cost optimization is an ongoing process that should be integrated into your regular operational rhythms. Regular monitoring, analysis, and adjustment of your optimization strategies will ensure continued cost efficiency as your workloads evolve.</p>"},{"location":"best-practices/data-governance/","title":"Data Governance","text":"<p>Home &gt; Best Practices &gt; Data Governance</p>"},{"location":"best-practices/data-governance/#data-governance-best-practices-for-azure-synapse-analytics","title":"Data Governance Best Practices for Azure Synapse Analytics","text":""},{"location":"best-practices/data-governance/#data-governance-framework","title":"Data Governance Framework","text":""},{"location":"best-practices/data-governance/#core-components","title":"Core Components","text":""},{"location":"best-practices/data-governance/#data-catalog","title":"Data Catalog","text":"<ul> <li>Metadata Management: Implement comprehensive metadata for all data assets</li> <li>Business Glossary: Maintain standardized definitions of business terms</li> <li>Data Dictionary: Document technical metadata including data types, constraints, and relationships</li> </ul>"},{"location":"best-practices/data-governance/#data-quality-framework","title":"Data Quality Framework","text":"<ul> <li>Quality Rules: Define and implement data quality rules</li> </ul> <pre><code># Example quality rule implementation in PySpark\nfrom pyspark.sql.functions import col, when, count\n\n# Check for null values in critical columns\ndef check_null_values(df, column_name):\n    null_count = df.filter(col(column_name).isNull()).count()\n    total_count = df.count()\n    return {\n        \"column\": column_name,\n        \"null_count\": null_count,\n        \"total_count\": total_count,\n        \"null_percentage\": (null_count / total_count) * 100 if total_count &gt; 0 else 0\n    }\n</code></pre> <ul> <li>Validation Frameworks: Implement automated data validation pipelines</li> <li>Quality Metrics: Track and report key quality metrics (completeness, accuracy, consistency)</li> </ul>"},{"location":"best-practices/data-governance/#data-lineage","title":"Data Lineage","text":"<ul> <li>End-to-End Tracking: Record data movement from source to consumption</li> <li>Impact Analysis: Enable analysis of upstream/downstream impacts of changes</li> <li>Audit Trail: Maintain history of data transformations and processing</li> </ul>"},{"location":"best-practices/data-governance/#azure-purview-integration","title":"Azure Purview Integration","text":""},{"location":"best-practices/data-governance/#automated-discovery","title":"Automated Discovery","text":""},{"location":"best-practices/data-governance/#data-estate-scanning","title":"Data Estate Scanning","text":"<ul> <li>Automated Scanning: Schedule regular scans of your data estate</li> </ul> <p><pre><code>{\n  \"name\": \"Scan-Synapse\",\n  \"properties\": {\n    \"dataSourceName\": \"AzureSynapseDW\",\n    \"scanRulesetName\": \"System_DefaultScanRuleSet\",\n    \"scanRulesetType\": \"System\",\n    \"recurrenceInterval\": \"PT24H\"\n  }\n}\n</code></pre> - Classification Rules: Configure custom classification rules for sensitive data - Incremental Scanning: Optimize scan performance with incremental scans</p>"},{"location":"best-practices/data-governance/#metadata-enrichment","title":"Metadata Enrichment","text":"<ul> <li>Business Attributes: Enrich technical metadata with business context</li> <li>Ownership: Assign data owners and stewards</li> <li>Sensitivity Labels: Apply appropriate sensitivity labels</li> </ul>"},{"location":"best-practices/data-governance/#catalog-and-search","title":"Catalog and Search","text":""},{"location":"best-practices/data-governance/#knowledge-center","title":"Knowledge Center","text":"<ul> <li>Self-Service Discovery: Enable users to search and discover relevant data assets</li> <li>Asset Collections: Organize related data assets into collections</li> <li>Metadata Templates: Create standardized templates for consistent documentation</li> </ul>"},{"location":"best-practices/data-governance/#insights","title":"Insights","text":"<ul> <li>Usage Metrics: Track data asset usage patterns</li> <li>Popularity Metrics: Identify most valuable data assets</li> <li>Expert Identification: Connect users with data domain experts</li> </ul>"},{"location":"best-practices/data-governance/#data-lifecycle-management","title":"Data Lifecycle Management","text":""},{"location":"best-practices/data-governance/#data-retention","title":"Data Retention","text":""},{"location":"best-practices/data-governance/#retention-policies","title":"Retention Policies","text":"<ul> <li>Policy Definition: Define retention requirements based on data type and regulations   <pre><code>-- Example of retention policy in Delta Lake\nALTER TABLE customer_data SET TBLPROPERTIES (\n  'delta.logRetentionDuration' = 'interval 7 years',\n  'delta.deletedFileRetentionDuration' = 'interval 30 days'\n)\n</code></pre></li> <li>Automated Enforcement: Implement automated processes for policy enforcement</li> <li>Exceptions Handling: Define process for handling retention exceptions</li> </ul>"},{"location":"best-practices/data-governance/#archiving-strategy","title":"Archiving Strategy","text":"<ul> <li>Tiered Storage: Move data through appropriate storage tiers</li> <li>Preservation Format: Select appropriate formats for long-term preservation</li> <li>Retrieval Mechanisms: Define processes for retrieving archived data</li> </ul>"},{"location":"best-practices/data-governance/#data-disposal","title":"Data Disposal","text":""},{"location":"best-practices/data-governance/#secure-deletion","title":"Secure Deletion","text":"<ul> <li>Hard Delete Processes: Implement processes for complete data removal</li> <li>Verification: Verify successful deletion of data</li> <li>Deletion Certification: Document and certify deletion for compliance</li> </ul>"},{"location":"best-practices/data-governance/#regulatory-compliance","title":"Regulatory Compliance","text":""},{"location":"best-practices/data-governance/#compliance-framework","title":"Compliance Framework","text":""},{"location":"best-practices/data-governance/#data-privacy","title":"Data Privacy","text":"<ul> <li>GDPR Compliance: Implement mechanisms for data subject rights</li> <li>Right to access</li> <li>Right to be forgotten</li> <li>Right to data portability</li> <li>Right to correction</li> <li>PII Handling: Special protections for personally identifiable information</li> <li>Consent Management: Track and respect data usage consent</li> </ul>"},{"location":"best-practices/data-governance/#industry-regulations","title":"Industry Regulations","text":"<ul> <li>Financial Services: Implement controls for regulations like GLBA, SOX</li> <li>Healthcare: Support HIPAA compliance requirements</li> <li>Cross-Industry: Address requirements from regulations like CCPA, PIPEDA</li> </ul>"},{"location":"best-practices/data-governance/#compliance-controls","title":"Compliance Controls","text":""},{"location":"best-practices/data-governance/#data-sovereignty","title":"Data Sovereignty","text":"<ul> <li>Geographic Restrictions: Enforce data residency requirements   <pre><code>{\n  \"location\": \"East US\",\n  \"tags\": {\n    \"DataResidency\": \"US\",\n    \"DataClassification\": \"Confidential\"\n  }\n}\n</code></pre></li> <li>Cross-Border Transfers: Implement controls for international data transfers</li> <li>Regional Compliance: Adhere to local data protection laws</li> </ul>"},{"location":"best-practices/data-governance/#audit-controls","title":"Audit Controls","text":"<ul> <li>Comprehensive Logging: Maintain detailed logs of data access and processing</li> <li>Evidence Collection: Automate collection of compliance evidence</li> <li>Reporting: Generate compliance reports for regulators and auditors</li> </ul>"},{"location":"best-practices/data-governance/#data-security-classifications","title":"Data Security Classifications","text":""},{"location":"best-practices/data-governance/#classification-framework","title":"Classification Framework","text":""},{"location":"best-practices/data-governance/#sensitivity-levels","title":"Sensitivity Levels","text":"<ul> <li>Public: Information freely available to anyone</li> <li>Internal: Information for use within the organization only</li> <li>Confidential: Sensitive information with restricted access</li> <li>Restricted: Highly sensitive information with strictly controlled access</li> </ul>"},{"location":"best-practices/data-governance/#implementation","title":"Implementation","text":"<ul> <li>Automated Discovery: Use pattern matching and ML for initial classification</li> <li>Manual Review: Human verification of sensitive data classification</li> <li>Classification Maintenance: Regular review and update of classifications</li> </ul>"},{"location":"best-practices/data-governance/#access-controls","title":"Access Controls","text":""},{"location":"best-practices/data-governance/#data-level-security","title":"Data-Level Security","text":"<ul> <li>Row-Level Security (RLS): Control data access at the row level   <pre><code>-- Create security predicate function\nCREATE FUNCTION dbo.fn_securitypredicate(@Region NVARCHAR(50))\n    RETURNS TABLE\nWITH SCHEMABINDING\nAS\n    RETURN SELECT 1 AS fn_securitypredicate_result\n    WHERE @Region IN (SELECT [Region] FROM dbo.UserRegions WHERE [User] = USER_NAME())\n    OR IS_MEMBER('db_owner') = 1;\n\n-- Create security policy\nCREATE SECURITY POLICY RegionalDataFilter\nADD FILTER PREDICATE dbo.fn_securitypredicate(Region)\nON dbo.SalesData\nWITH (STATE = ON);\n</code></pre></li> <li>Column-Level Security: Restrict access to specific columns</li> <li>Dynamic Data Masking: Mask sensitive data for unauthorized users   <pre><code>ALTER TABLE customers\nALTER COLUMN email ADD MASKED WITH (FUNCTION = 'email()');\n\nALTER TABLE customers\nALTER COLUMN phone ADD MASKED WITH (FUNCTION = 'partial(1,\"XXXXXXX\",4)');\n</code></pre></li> </ul>"},{"location":"best-practices/data-governance/#data-sharing-and-collaboration","title":"Data Sharing and Collaboration","text":""},{"location":"best-practices/data-governance/#secure-data-sharing","title":"Secure Data Sharing","text":""},{"location":"best-practices/data-governance/#sharing-mechanisms","title":"Sharing Mechanisms","text":"<ul> <li>Shared Datasets: Define standardized datasets for sharing</li> <li>Views and Functions: Use to control exactly what data is exposed</li> <li>Data Sharing Agreements: Formalize data sharing arrangements</li> </ul>"},{"location":"best-practices/data-governance/#access-governance","title":"Access Governance","text":"<ul> <li>Approval Workflows: Implement formal approval processes</li> <li>Access Reviews: Conduct periodic reviews of shared data access</li> <li>Revocation: Implement mechanisms to revoke access when needed</li> </ul>"},{"location":"best-practices/data-governance/#collaborative-governance","title":"Collaborative Governance","text":""},{"location":"best-practices/data-governance/#cross-functional-collaboration","title":"Cross-Functional Collaboration","text":"<ul> <li>Data Stewardship: Assign domain-specific data stewards</li> <li>Governance Council: Establish cross-functional governance body</li> <li>Community of Practice: Foster data governance community</li> </ul>"},{"location":"best-practices/data-governance/#feedback-mechanisms","title":"Feedback Mechanisms","text":"<ul> <li>Issue Reporting: Create channels for data quality issues</li> <li>Continuous Improvement: Implement process for governance enhancement</li> <li>Knowledge Sharing: Facilitate sharing of best practices</li> </ul>"},{"location":"best-practices/data-governance/#governance-operating-model","title":"Governance Operating Model","text":""},{"location":"best-practices/data-governance/#roles-and-responsibilities","title":"Roles and Responsibilities","text":""},{"location":"best-practices/data-governance/#key-roles","title":"Key Roles","text":"<ul> <li>Chief Data Officer: Executive accountability for data governance</li> <li>Data Governance Lead: Day-to-day governance program management</li> <li>Data Stewards: Domain-specific governance implementation</li> <li>Data Custodians: Technical management of data assets</li> <li>Data Owners: Business accountability for specific data domains</li> </ul>"},{"location":"best-practices/data-governance/#raci-matrix","title":"RACI Matrix","text":"<ul> <li>Define who is Responsible, Accountable, Consulted, and Informed for key governance activities</li> </ul>"},{"location":"best-practices/data-governance/#governance-processes","title":"Governance Processes","text":""},{"location":"best-practices/data-governance/#policy-management","title":"Policy Management","text":"<ul> <li>Policy Development: Process for creating data policies</li> <li>Policy Communication: Mechanisms for communicating policies</li> <li>Policy Enforcement: Procedures for ensuring policy compliance</li> </ul>"},{"location":"best-practices/data-governance/#issue-management","title":"Issue Management","text":"<ul> <li>Issue Identification: Processes for identifying governance issues</li> <li>Remediation: Procedures for addressing identified issues</li> <li>Root Cause Analysis: Methods for preventing recurring issues</li> </ul>"},{"location":"best-practices/data-governance/#measuring-governance-effectiveness","title":"Measuring Governance Effectiveness","text":""},{"location":"best-practices/data-governance/#key-performance-indicators","title":"Key Performance Indicators","text":""},{"location":"best-practices/data-governance/#quality-metrics","title":"Quality Metrics","text":"<ul> <li>Data Quality Score: Composite measure of data quality dimensions</li> <li>Issue Resolution Time: Time to resolve data quality issues</li> <li>Data Coverage: Percentage of data assets under governance</li> </ul>"},{"location":"best-practices/data-governance/#business-impact","title":"Business Impact","text":"<ul> <li>Decision Confidence: Confidence in data-driven decisions</li> <li>Operational Efficiency: Reduced time spent on data preparation</li> <li>Regulatory Compliance: Reduction in compliance findings</li> </ul>"},{"location":"best-practices/data-governance/#maturity-assessment","title":"Maturity Assessment","text":""},{"location":"best-practices/data-governance/#maturity-model","title":"Maturity Model","text":"<ul> <li>Initial: Ad-hoc governance processes</li> <li>Repeatable: Documented governance processes</li> <li>Defined: Standardized governance across organization</li> <li>Managed: Quantitatively managed governance</li> <li>Optimizing: Continuous governance improvement</li> </ul>"},{"location":"best-practices/data-governance/#assessment-process","title":"Assessment Process","text":"<ul> <li>Self-Assessment: Regular internal evaluation of governance maturity</li> <li>Benchmarking: Comparison with industry standards</li> <li>Roadmap Development: Planning for maturity improvement</li> </ul>"},{"location":"best-practices/data-governance/#conclusion","title":"Conclusion","text":"<p>Effective data governance in Azure Synapse Analytics requires a comprehensive approach spanning people, processes, and technology. By implementing these best practices, organizations can ensure their data assets are properly managed, protected, and utilized to deliver maximum business value while maintaining compliance with regulatory requirements.</p> <p>A well-designed data governance framework should evolve with the organization's needs and the changing regulatory landscape. Regular assessment and continuous improvement ensure that governance practices remain effective and aligned with business objectives.</p>"},{"location":"best-practices/performance-optimization/","title":"Performance optimization","text":"<p>Home &gt; Best Practices &gt; Performance Optimization</p>"},{"location":"best-practices/performance-optimization/#performance-optimization-best-practices","title":"Performance Optimization Best Practices","text":""},{"location":"best-practices/performance-optimization/#query-performance-optimization","title":"Query Performance Optimization","text":""},{"location":"best-practices/performance-optimization/#spark-pool-optimization","title":"Spark Pool Optimization","text":""},{"location":"best-practices/performance-optimization/#resource-configuration","title":"Resource Configuration","text":"<ul> <li>Autoscale Configuration: Set appropriate min and max node counts based on workload patterns</li> <li>Node Size Selection: Choose the right memory-to-core ratio based on workload characteristics</li> <li>Dynamic Allocation: Enable dynamic executor allocation for variable workloads</li> <li>Spark Configurations:</li> </ul> <pre><code>spark.sql.adaptive.enabled = true\nspark.sql.adaptive.coalescePartitions.enabled = true\nspark.sql.adaptive.skewJoin.enabled = true\n</code></pre>"},{"location":"best-practices/performance-optimization/#code-optimization","title":"Code Optimization","text":"<ul> <li>DataFrame Caching: Cache intermediate DataFrames for reuse in complex workflows</li> </ul> <pre><code>df = spark.read.format(\"delta\").load(\"/path/to/data\")\ndf.cache()  # Cache the DataFrame for repeated use\n</code></pre> <ul> <li>Partition Pruning: Ensure your queries can leverage partition pruning</li> </ul> <pre><code># Good - enables partition pruning\ndf.filter(df.date_column == \"2025-01-01\").show()\n\n# Bad - prevents partition pruning\ndf.filter(year(df.date_column) == 2025).show()\n</code></pre> <ul> <li>Broadcast Joins: Use broadcast joins for small-to-large table joins</li> </ul> <pre><code>from pyspark.sql.functions import broadcast\n\nlarge_df = spark.table(\"large_table\")\nsmall_df = spark.table(\"small_table\")\n\n# Broadcast the smaller table\nresult = large_df.join(broadcast(small_df), \"join_key\")\n</code></pre>"},{"location":"best-practices/performance-optimization/#serverless-sql-optimization","title":"Serverless SQL Optimization","text":""},{"location":"best-practices/performance-optimization/#query-structure","title":"Query Structure","text":"<ul> <li>Predicate Pushdown: Structure queries to enable predicate pushdown to the storage layer</li> </ul> <p><pre><code>-- Good: Enables pushdown\nSELECT * FROM external_table WHERE date_column = '2025-01-01'\n\n-- Avoid: Prevents pushdown\nSELECT * FROM external_table WHERE YEAR(date_column) = 2025\n</code></pre> - Column Pruning: Select only necessary columns   <pre><code>-- Good: Only reads required columns\nSELECT column1, column2 FROM large_table\n\n-- Avoid: Reads all columns\nSELECT * FROM large_table\n</code></pre></p>"},{"location":"best-practices/performance-optimization/#external-table-design","title":"External Table Design","text":"<ul> <li>Statistics: Create and maintain statistics on frequently queried columns   <pre><code>CREATE STATISTICS stats_column1 ON external_table (column1)\n</code></pre></li> <li>File Format Selection: Prefer columnar formats (Parquet, Delta) over row-based formats (CSV, JSON)</li> <li>Partitioning Strategy: Align partitioning with common query filters</li> </ul>"},{"location":"best-practices/performance-optimization/#data-storage-optimization","title":"Data Storage Optimization","text":""},{"location":"best-practices/performance-optimization/#file-format-optimization","title":"File Format Optimization","text":""},{"location":"best-practices/performance-optimization/#delta-lake-optimization","title":"Delta Lake Optimization","text":"<ul> <li>File Compaction: Regularly compact small files   <pre><code>OPTIMIZE tableName\n</code></pre></li> <li>Z-Ordering: Apply Z-ordering on commonly filtered columns   <pre><code>OPTIMIZE tableName ZORDER BY (column1, column2)\n</code></pre></li> <li>Bloom Filter Indexes: Create bloom filter indexes for selective string columns   <pre><code>CREATE BLOOMFILTER INDEX ON TABLE tableName FOR COLUMNS(category_column)\n</code></pre></li> </ul>"},{"location":"best-practices/performance-optimization/#parquet-optimization","title":"Parquet Optimization","text":"<ul> <li>Compression: Use appropriate compression codecs (Snappy for balance, Zstd for better compression)   <pre><code>df.write.option(\"compression\", \"snappy\").format(\"parquet\").save(\"/path/to/data\")\n</code></pre></li> <li>Row Group Size: Optimize row group size for your query patterns   <pre><code>df.write.option(\"parquet.block.size\", 134217728).format(\"parquet\").save(\"/path/to/data\")\n</code></pre></li> </ul>"},{"location":"best-practices/performance-optimization/#data-layout-optimization","title":"Data Layout Optimization","text":""},{"location":"best-practices/performance-optimization/#partitioning-strategies","title":"Partitioning Strategies","text":"<ul> <li>Date-Based Partitioning: Partition time series data by appropriate time granularity   <pre><code># Daily partitioning for frequently accessed recent data\ndf.write.partitionBy(\"year\", \"month\", \"day\").format(\"delta\").save(\"/path/to/data\")\n\n# Monthly partitioning for historical data\ndf.write.partitionBy(\"year\", \"month\").format(\"delta\").save(\"/path/to/historical_data\")\n</code></pre></li> <li>Categorical Partitioning: Partition by categorical columns with appropriate cardinality   <pre><code># Good: Low to medium cardinality column\ndf.write.partitionBy(\"region\").format(\"delta\").save(\"/path/to/data\")\n\n# Avoid: High cardinality columns like customer_id\n</code></pre></li> <li>Hybrid Partitioning: Combine date and categorical dimensions when appropriate   <pre><code>df.write.partitionBy(\"year\", \"month\", \"region\").format(\"delta\").save(\"/path/to/data\")\n</code></pre></li> </ul>"},{"location":"best-practices/performance-optimization/#memory-optimization","title":"Memory Optimization","text":""},{"location":"best-practices/performance-optimization/#spark-memory-management","title":"Spark Memory Management","text":""},{"location":"best-practices/performance-optimization/#memory-configuration","title":"Memory Configuration","text":"<ul> <li>Executor Memory: Allocate appropriate memory for executors based on data size   <pre><code>spark.executor.memory = 8g\n</code></pre></li> <li>Memory Fraction: Tune the fraction of heap used for execution and storage   <pre><code>spark.memory.fraction = 0.8\nspark.memory.storageFraction = 0.5\n</code></pre></li> </ul>"},{"location":"best-practices/performance-optimization/#data-skew-handling","title":"Data Skew Handling","text":"<ul> <li>Salting: Add a salt column for skewed keys   <pre><code>from pyspark.sql.functions import monotonically_increasing_id, lit\n\n# Add a salt column for skewed data\ndf = df.withColumn(\"salt\", (monotonically_increasing_id() % 10).cast(\"int\"))\n</code></pre></li> <li>Adaptive Query Execution: Enable adaptive query execution for automatic skew handling   <pre><code>spark.sql.adaptive.enabled = true\nspark.sql.adaptive.skewJoin.enabled = true\n</code></pre></li> </ul>"},{"location":"best-practices/performance-optimization/#monitoring-and-tuning","title":"Monitoring and Tuning","text":""},{"location":"best-practices/performance-optimization/#performance-monitoring","title":"Performance Monitoring","text":""},{"location":"best-practices/performance-optimization/#key-metrics-to-monitor","title":"Key Metrics to Monitor","text":"<ul> <li>Spark UI Metrics: Regularly review stage duration, task skew, and shuffle data</li> <li>Query Execution Plans: Analyze physical and logical plans for optimization opportunities   <pre><code>df.explain(True)  # Show the query execution plan\n</code></pre></li> <li>I/O Metrics: Monitor read/write throughput and latency</li> </ul>"},{"location":"best-practices/performance-optimization/#tuning-methodology","title":"Tuning Methodology","text":"<ul> <li>Benchmarking: Establish baseline performance metrics</li> <li>Iterative Tuning: Make one change at a time and measure impact</li> <li>Workload Analysis: Tune based on dominant workload patterns</li> </ul>"},{"location":"best-practices/performance-optimization/#cost-optimization","title":"Cost Optimization","text":""},{"location":"best-practices/performance-optimization/#resource-utilization","title":"Resource Utilization","text":""},{"location":"best-practices/performance-optimization/#auto-scaling","title":"Auto-Scaling","text":"<ul> <li>Configure auto-scaling based on actual workload patterns</li> <li>Set appropriate idle timeout to reduce costs during inactive periods</li> </ul>"},{"location":"best-practices/performance-optimization/#right-sizing","title":"Right-Sizing","text":"<ul> <li>Start with smaller instances and scale up only when needed</li> <li>Monitor utilization metrics to identify over-provisioned resources</li> </ul>"},{"location":"best-practices/performance-optimization/#storage-costs","title":"Storage Costs","text":""},{"location":"best-practices/performance-optimization/#data-lifecycle-management","title":"Data Lifecycle Management","text":"<ul> <li>Archive infrequently accessed data to cooler storage tiers</li> <li>Implement retention policies for transient data</li> <li>Use the appropriate storage tier based on access patterns</li> </ul>"},{"location":"best-practices/performance-optimization/#vacuum-operations","title":"Vacuum Operations","text":"<ul> <li>Regularly clean up old Delta files   <pre><code>VACUUM tableName RETAIN 7 DAYS\n</code></pre></li> <li>Monitor and manage transaction log growth</li> </ul>"},{"location":"best-practices/performance-optimization/#conclusion","title":"Conclusion","text":"<p>Optimizing performance in Azure Synapse Analytics requires a holistic approach covering storage organization, query design, resource configuration, and ongoing monitoring. By applying these best practices, you can achieve significant performance improvements and cost savings while meeting your analytical workload requirements.</p> <p>Remember that performance optimization is an iterative process that should be tailored to your specific workload characteristics and business requirements.</p>"},{"location":"best-practices/security/","title":"Security Best Practices for Azure Synapse Analytics","text":"<p>Home &gt; Best Practices &gt; Security</p>"},{"location":"best-practices/security/#identity-and-access-management","title":"Identity and Access Management","text":""},{"location":"best-practices/security/#azure-active-directory-integration","title":"Azure Active Directory Integration","text":""},{"location":"best-practices/security/#authentication","title":"Authentication","text":"<ul> <li>Enforce AAD Authentication: Use Azure Active Directory as the primary authentication method</li> <li>Managed Identities: Use managed identities for service-to-service authentication</li> </ul> <pre><code>{\n  \"type\": \"Microsoft.Synapse/workspaces\",\n  \"properties\": {\n    \"identity\": {\n      \"type\": \"SystemAssigned\"\n    }\n  }\n}\n</code></pre> <ul> <li>Multi-Factor Authentication: Require MFA for all users accessing Synapse workspaces</li> </ul>"},{"location":"best-practices/security/#authorization","title":"Authorization","text":"<ul> <li>Role-Based Access Control (RBAC): Implement least privilege principle with built-in and custom roles</li> </ul> <pre><code># Assign Synapse Contributor role to a user\nNew-AzRoleAssignment -SignInName user@contoso.com `\n    -RoleDefinitionName \"Synapse Contributor\" `\n    -Scope \"/subscriptions/&lt;subscription-id&gt;/resourceGroups/&lt;resource-group&gt;/providers/Microsoft.Synapse/workspaces/&lt;workspace-name&gt;\"\n</code></pre> <ul> <li>Custom Roles: Create custom roles for specialized access requirements</li> <li>Conditional Access Policies: Implement based on device compliance, location, and risk</li> </ul>"},{"location":"best-practices/security/#workspace-level-security","title":"Workspace-Level Security","text":"<ul> <li>IP Firewall Rules: Restrict workspace access to specific IP ranges</li> </ul> <pre><code>{\n  \"properties\": {\n    \"defaultDataLakeStorage\": {},\n    \"managedResourceGroupName\": \"workspaceManagedGroup\",\n    \"sqlAdministratorLogin\": \"sqladminuser\",\n    \"sqlAdministratorLoginPassword\": \"...\",\n    \"managedVirtualNetwork\": \"default\",\n    \"trustedServiceBypassEnabled\": true,\n    \"azureADOnlyAuthentication\": true,\n    \"firewallRules\": [\n      {\n        \"name\": \"AllowedIPs\",\n        \"properties\": {\n          \"startIpAddress\": \"10.0.0.0\",\n          \"endIpAddress\": \"10.0.0.255\"\n        }\n      }\n    ]\n  }\n}\n</code></pre> <ul> <li>Private Link: Use private endpoints to access Synapse from your VNet</li> <li>Managed Virtual Networks: Isolate Synapse resources within managed VNet</li> </ul>"},{"location":"best-practices/security/#data-security","title":"Data Security","text":""},{"location":"best-practices/security/#encryption-and-data-protection","title":"Encryption and Data Protection","text":""},{"location":"best-practices/security/#data-encryption","title":"Data Encryption","text":"<ul> <li>Encryption at Rest: Enable encryption for all data storage</li> <li>Use customer-managed keys when greater control is needed</li> </ul> <pre><code># Configure customer-managed key encryption\nSet-AzSynapseWorkspace -Name $workspaceName `\n    -ResourceGroupName $resourceGroupName `\n    -KeyVaultUrl $keyVaultUrl `\n    -KeyName $keyName `\n    -KeyVersion $keyVersion\n</code></pre> <ul> <li>Encryption in Transit: Ensure all data connections use TLS 1.2+</li> <li>Transparent Data Encryption (TDE): Enable for SQL pools</li> </ul>"},{"location":"best-practices/security/#sensitive-data-handling","title":"Sensitive Data Handling","text":"<ul> <li>Data Classification: Implement data discovery and classification</li> </ul> <pre><code>ADD SENSITIVITY CLASSIFICATION TO\n  schema.table.column\nWITH (\n  LABEL = 'Confidential',\n  INFORMATION_TYPE = 'Financial'\n)\n</code></pre> <ul> <li>Dynamic Data Masking: Apply to sensitive columns</li> </ul> <pre><code>ALTER TABLE customer ADD MASKED WITH (FUNCTION = 'partial(2,\"XXXXXXX\",0)') FOR COLUMN credit_card;\n</code></pre> <ul> <li>Data Anonymization: Use techniques like tokenization, perturbation, and generalization for analytics on sensitive data</li> </ul>"},{"location":"best-practices/security/#sql-security-features","title":"SQL Security Features","text":""},{"location":"best-practices/security/#sql-specific-controls","title":"SQL-Specific Controls","text":"<ul> <li>Row-Level Security (RLS): Implement for fine-grained access control</li> </ul> <pre><code>-- Create security predicate function\nCREATE FUNCTION dbo.fn_securitypredicate(@Region VARCHAR(50))  \n    RETURNS TABLE  \nWITH SCHEMABINDING  \nAS  \n    RETURN SELECT 1 AS fn_securitypredicate_result\n    WHERE @Region = 'North' AND USER_NAME() = 'northsalesuser'\n    OR @Region = 'South' AND USER_NAME() = 'southsalesuser'\n    OR IS_MEMBER('db_owner') = 1;\n\n-- Create security policy\nCREATE SECURITY POLICY SalesDataFilter  \nADD FILTER PREDICATE dbo.fn_securitypredicate(Region)\nON dbo.SalesData;\n</code></pre> <ul> <li>Column-Level Security: Restrict column access based on user roles</li> </ul> <pre><code>DENY SELECT ON dbo.employees(salary) TO analyst_role;\n</code></pre> <ul> <li>SQL Vulnerability Assessment: Enable regular automated security scans</li> </ul>"},{"location":"best-practices/security/#network-security","title":"Network Security","text":""},{"location":"best-practices/security/#network-isolation","title":"Network Isolation","text":""},{"location":"best-practices/security/#private-endpoints","title":"Private Endpoints","text":"<ul> <li>Private Link Service: Implement for secure connectivity from VNets</li> </ul> <pre><code>{\n  \"name\": \"private-endpoint\",\n  \"properties\": {\n    \"privateLinkServiceConnections\": [\n      {\n        \"name\": \"synapse-private-link\",\n        \"properties\": {\n          \"privateLinkServiceId\": \"/subscriptions/&lt;sub-id&gt;/resourceGroups/&lt;rg&gt;/providers/Microsoft.Synapse/workspaces/&lt;workspace&gt;\",\n          \"groupIds\": [ \"Sql\" ]\n        }\n      }\n    ],\n    \"subnet\": {\n      \"id\": \"/subscriptions/&lt;sub-id&gt;/resourceGroups/&lt;rg&gt;/providers/Microsoft.Network/virtualNetworks/&lt;vnet&gt;/subnets/&lt;subnet&gt;\"\n    }\n  }\n}\n</code></pre> <ul> <li>Service Endpoints: Enable for services that don't support Private Link</li> </ul>"},{"location":"best-practices/security/#network-security-groups","title":"Network Security Groups","text":"<ul> <li>NSG Rules: Implement restrictive inbound/outbound rules</li> <li>Application Security Groups: Group related resources for simplified management</li> </ul>"},{"location":"best-practices/security/#managed-virtual-network","title":"Managed Virtual Network","text":"<ul> <li>Data Exfiltration Protection: Enable to prevent data leakage</li> <li>Approved Private Endpoints: Restrict outbound connectivity to approved resources</li> </ul>"},{"location":"best-practices/security/#secret-management","title":"Secret Management","text":""},{"location":"best-practices/security/#azure-key-vault-integration","title":"Azure Key Vault Integration","text":""},{"location":"best-practices/security/#credential-storage","title":"Credential Storage","text":"<ul> <li>Key Vault References: Store and reference secrets securely</li> </ul> <pre><code># Using Key Vault reference in Spark\nconnectionString = dbutils.secrets.get(scope=\"key-vault-scope\", key=\"storage-connection-string\")\n</code></pre> <ul> <li>Key Rotation: Implement regular key rotation policies</li> <li>Access Policies: Restrict key vault access based on least privilege</li> </ul>"},{"location":"best-practices/security/#secure-parameter-passing","title":"Secure Parameter Passing","text":"<ul> <li>Azure Synapse Pipelines: Use pipeline parameters with secure strings</li> <li>Linked Services: Use Key Vault for credentials in linked services</li> </ul> <pre><code>{\n  \"name\": \"AzureStorageLinkedService\",\n  \"properties\": {\n    \"type\": \"AzureBlobStorage\",\n    \"typeProperties\": {\n      \"connectionString\": {\n        \"type\": \"AzureKeyVaultSecret\",\n        \"store\": {\n          \"referenceName\": \"AzureKeyVaultLinkedService\",\n          \"type\": \"LinkedServiceReference\"\n        },\n        \"secretName\": \"StorageConnectionString\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"best-practices/security/#auditing-and-monitoring","title":"Auditing and Monitoring","text":""},{"location":"best-practices/security/#comprehensive-logging","title":"Comprehensive Logging","text":""},{"location":"best-practices/security/#audit-configuration","title":"Audit Configuration","text":"<ul> <li>Enable Diagnostics Logging: Configure for all Synapse components</li> </ul> <pre><code>{\n  \"properties\": {\n    \"workspaceId\": \"/subscriptions/&lt;sub-id&gt;/resourceGroups/&lt;rg&gt;/providers/Microsoft.Synapse/workspaces/&lt;workspace&gt;\",\n    \"logs\": [\n      {\n        \"category\": \"SynapseRbacOperations\",\n        \"enabled\": true,\n        \"retentionPolicy\": {\n          \"days\": 90,\n          \"enabled\": true\n        }\n      }\n    ]\n  }\n}\n</code></pre> <ul> <li>SQL Auditing: Enable auditing for SQL pools</li> </ul> <pre><code>CREATE SERVER AUDIT [AuditName]\nTO BLOB_STORAGE (\n    STORAGE_ENDPOINT = 'https://storageaccount.blob.core.windows.net/';\n    STORAGE_ACCOUNT_ACCESS_KEY = '...';\n    RETENTION_DAYS = 90\n)\nWITH ( QUEUE_DELAY = 1000, ON_FAILURE = CONTINUE )\n</code></pre> <ul> <li>Advanced Threat Protection: Enable to detect anomalous activities</li> </ul>"},{"location":"best-practices/security/#security-monitoring","title":"Security Monitoring","text":"<ul> <li>Azure Security Center: Enable for vulnerability assessment</li> <li>Azure Sentinel: Integrate for advanced security monitoring and response</li> <li>Alert Configuration: Set up alerts for suspicious activities</li> </ul> <pre><code># Create a security alert\nNew-AzSecurityAlert -ResourceId \"/subscriptions/&lt;sub-id&gt;/resourceGroups/&lt;rg&gt;/providers/Microsoft.Synapse/workspaces/&lt;workspace&gt;\" `\n    -AlertDisplayName \"Suspicious authentication failure\" `\n    -AlertName \"SuspiciousAuthFailure\"\n</code></pre>"},{"location":"best-practices/security/#compliance-and-governance","title":"Compliance and Governance","text":""},{"location":"best-practices/security/#data-governance","title":"Data Governance","text":""},{"location":"best-practices/security/#data-lineage","title":"Data Lineage","text":"<ul> <li>Azure Purview Integration: Enable for automated data discovery and classification</li> <li>Metadata Management: Maintain accurate metadata with descriptions and ownership</li> </ul>"},{"location":"best-practices/security/#compliance-controls","title":"Compliance Controls","text":"<ul> <li>Data Residency: Ensure data remains in compliant regions</li> <li>Retention Policies: Implement appropriate data retention policies</li> </ul> <pre><code>-- Example retention policy in Spark SQL\nALTER TABLE orders SET TBLPROPERTIES (\n  'delta.logRetentionDuration' = 'interval 365 days',\n  'delta.deletedFileRetentionDuration' = 'interval 30 days'\n)\n</code></pre> <ul> <li>Regulatory Compliance: Implement controls required by GDPR, HIPAA, etc.</li> </ul>"},{"location":"best-practices/security/#security-devops","title":"Security DevOps","text":""},{"location":"best-practices/security/#security-in-cicd","title":"Security in CI/CD","text":""},{"location":"best-practices/security/#secure-deployment-practices","title":"Secure Deployment Practices","text":"<ul> <li>Infrastructure as Code: Use Azure Resource Manager or Bicep templates with security parameters</li> <li>Template Validation: Validate templates for security compliance</li> <li>Automated Testing: Include security testing in CI/CD pipelines</li> </ul>"},{"location":"best-practices/security/#security-posture-management","title":"Security Posture Management","text":"<ul> <li>Regular Assessment: Schedule regular security assessments</li> <li>Vulnerability Management: Track and remediate vulnerabilities</li> <li>Security Baselines: Establish and maintain security baselines</li> </ul>"},{"location":"best-practices/security/#conclusion","title":"Conclusion","text":"<p>Implementing a defense-in-depth approach to security in Azure Synapse Analytics requires attention to multiple layers including identity, data, network, and governance. By following these best practices, you can create a secure analytics environment that protects your data assets while enabling productive analytics workflows.</p> <p>For more information on security in Azure Synapse Analytics, refer to the official security documentation.</p>"},{"location":"diagrams/","title":"Azure Synapse Analytics Architecture Diagrams","text":"<p>This section contains architecture diagrams for Azure Synapse Analytics components and workflows, focusing on Delta Lakehouse and Serverless SQL capabilities.</p>"},{"location":"diagrams/#delta-lakehouse-architecture","title":"Delta Lakehouse Architecture","text":"<p>Note: The diagram above shows the logical architecture of a Delta Lakehouse implementation in Azure Synapse Analytics.</p>"},{"location":"diagrams/#components-description","title":"Components Description","text":"<ol> <li>Azure Data Lake Storage Gen2 - Provides the foundation for storing Delta tables</li> <li>Azure Synapse Spark Pools - Executes Spark jobs for data processing</li> <li>Delta Lake - Provides ACID transactions, time travel, and schema enforcement</li> <li>Azure Synapse Pipeline - Orchestrates data movement and transformation</li> <li>Azure Synapse Serverless SQL - Provides SQL query capabilities over the Delta Lake</li> </ol>"},{"location":"diagrams/#serverless-sql-architecture","title":"Serverless SQL Architecture","text":"<p>Note: The diagram above illustrates the serverless SQL query architecture in Azure Synapse Analytics.</p>"},{"location":"diagrams/#components-description_1","title":"Components Description","text":"<ol> <li>Azure Synapse Serverless SQL Pool - On-demand SQL query service</li> <li>Storage Accounts - ADLS Gen2, Blob Storage, etc.</li> <li>File Formats - Support for Parquet, Delta, CSV, JSON</li> <li>Query Service - Distributed query processing engine</li> <li>Results - Query results available via JDBC/ODBC or direct export</li> </ol>"},{"location":"diagrams/#shared-metadata-architecture","title":"Shared Metadata Architecture","text":"<p>Note: The diagram above shows how metadata can be shared across different compute engines in Azure Synapse Analytics.</p>"},{"location":"diagrams/#components-description_2","title":"Components Description","text":"<ol> <li>Azure Synapse Workspace - Central workspace for all analytics services</li> <li>Metadata Services - Shared metadata layer</li> <li>Spark Metastore - Hive metastore for Spark</li> <li>SQL Metadata - SQL catalog and metadata</li> <li>Integration Runtime - Shared integration services</li> </ol>"},{"location":"diagrams/#data-flow-diagrams","title":"Data Flow Diagrams","text":""},{"location":"diagrams/#delta-lake-write-flow","title":"Delta Lake Write Flow","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Raw Data  \u2502\u2500\u2500\u2500\u2500\u25b6\u2502 Spark Pool \u2502\u2500\u2500\u2500\u2500\u25b6\u2502 Processing \u2502\u2500\u2500\u2500\u2500\u25b6\u2502 Delta Lake \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                                               \u2502\n                                                               \u25bc\n                                                        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                                                        \u2502  Metadata  \u2502\n                                                        \u2502   Update   \u2502\n                                                        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"diagrams/#serverless-sql-query-flow","title":"Serverless SQL Query Flow","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    User    \u2502\u2500\u2500\u2500\u2500\u25b6\u2502  SQL Query \u2502\u2500\u2500\u2500\u2500\u25b6\u2502 Query Plan \u2502\u2500\u2500\u2500\u2500\u25b6\u2502   Query    \u2502\n\u2502   Query    \u2502     \u2502   Parser   \u2502     \u2502 Generation \u2502     \u2502 Execution  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                                               \u2502\n                                                               \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Results   \u2502\u25c0\u2500\u2500\u2500\u2500\u2502   Result   \u2502\u25c0\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502 Data Source\u2502\n\u2502            \u2502     \u2502 Processing \u2502                       \u2502   Access   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"diagrams/#creating-architecture-diagrams","title":"Creating Architecture Diagrams","text":"<p>For production documentation, actual diagram images should be created using tools like:</p> <ol> <li>Microsoft Visio - Professional diagramming tool</li> <li>Draw.io - Free online diagramming tool</li> <li>Lucidchart - Collaborative diagramming</li> <li>Mermaid - Markdown-based diagramming</li> </ol>"},{"location":"diagrams/#diagram-standards","title":"Diagram Standards","text":"<p>When creating architecture diagrams for this documentation:</p> <ol> <li>Use Azure official icons for Azure services</li> <li>Maintain consistent color schemes</li> <li>Include clear labels for all components</li> <li>Provide a legend if multiple icon types are used</li> <li>Ensure high resolution for all exported images</li> <li>Use PNG format with transparent backgrounds</li> <li>Include both logical and physical architecture views when appropriate</li> </ol>"},{"location":"diagrams/#placeholder-notice","title":"Placeholder Notice","text":"<p>The diagrams referenced in this document need to be created and placed in this directory. The text diagrams are placeholders for actual visual diagrams that should follow the standards outlined above.</p>"},{"location":"reference/security-checklist/","title":"Azure Synapse Analytics Security Checklist","text":"<p>Home &gt; Reference &gt; Security Checklist</p> <p>This checklist provides a comprehensive set of security measures and best practices for securing your Azure Synapse Analytics environment.</p>"},{"location":"reference/security-checklist/#network-security","title":"Network Security","text":"<ul> <li>[ ] Implement private endpoints for all Synapse workspace connections</li> <li>[ ] Configure managed virtual network for the Synapse workspace</li> <li>[ ] Set up IP firewall rules to restrict access</li> <li>[ ] Enable service endpoints for additional security</li> <li>[ ] Configure DNS settings for private endpoints</li> <li>[ ] Review and limit outbound network connectivity</li> <li>[ ] Implement network security groups (NSGs) where applicable</li> </ul>"},{"location":"reference/security-checklist/#authentication-and-authorization","title":"Authentication and Authorization","text":"<ul> <li>[ ] Enable Microsoft Entra ID (Azure AD) authentication for all services</li> <li>[ ] Configure multi-factor authentication for all admin accounts</li> <li>[ ] Set up managed identities for Synapse workspace resources</li> <li>[ ] Create custom RBAC roles with least privilege permissions</li> <li>[ ] Regularly review and audit role assignments</li> <li>[ ] Implement Privileged Identity Management for just-in-time access</li> <li>[ ] Use service principals with limited scope for automated processes</li> <li>[ ] Implement conditional access policies for sensitive workloads</li> </ul>"},{"location":"reference/security-checklist/#data-protection","title":"Data Protection","text":"<ul> <li>[ ] Enable encryption at rest for all storage accounts</li> <li>[ ] Use TLS 1.2+ for all data in transit</li> <li>[ ] Implement customer-managed keys for encryption</li> <li>[ ] Configure double encryption where available</li> <li>[ ] Implement column-level security for sensitive data</li> <li>[ ] Set up row-level security for multi-tenant scenarios</li> <li>[ ] Enable dynamic data masking for PII data</li> <li>[ ] Configure Azure Purview integration for data governance</li> <li>[ ] Implement data classification and labeling</li> <li>[ ] Set up data exfiltration protection</li> </ul>"},{"location":"reference/security-checklist/#key-management","title":"Key Management","text":"<ul> <li>[ ] Store all secrets in Azure Key Vault</li> <li>[ ] Rotate keys and secrets on a regular schedule</li> <li>[ ] Enable soft delete and purge protection for Key Vault</li> <li>[ ] Implement access policies with least privilege</li> <li>[ ] Set up Key Vault diagnostics logging</li> <li>[ ] Configure managed identities for Key Vault access</li> <li>[ ] Use separate key vaults for different environments</li> </ul>"},{"location":"reference/security-checklist/#monitoring-and-logging","title":"Monitoring and Logging","text":"<ul> <li>[ ] Enable diagnostic settings for all Synapse components</li> <li>[ ] Configure workspace diagnostic logs to be sent to Log Analytics</li> <li>[ ] Set up SQL audit logs for all SQL pools</li> <li>[ ] Configure Apache Spark application logs</li> <li>[ ] Create alert rules for security events</li> <li>[ ] Implement Azure Defender for SQL</li> <li>[ ] Set up Microsoft Sentinel integration for advanced threat protection</li> <li>[ ] Configure automated security responses for critical alerts</li> <li>[ ] Implement regular security assessments</li> <li>[ ] Review logs for unauthorized access attempts</li> </ul>"},{"location":"reference/security-checklist/#compliance","title":"Compliance","text":"<ul> <li>[ ] Document compliance requirements for your organization</li> <li>[ ] Configure appropriate compliance settings in Microsoft Purview</li> <li>[ ] Implement regular compliance audits</li> <li>[ ] Set up data residency requirements</li> <li>[ ] Configure retention policies for all data</li> <li>[ ] Implement privacy controls for personal data</li> <li>[ ] Set up regular compliance reporting</li> <li>[ ] Configure audit trails for regulatory requirements</li> <li>[ ] Document all security measures for compliance evidence</li> </ul>"},{"location":"reference/security-checklist/#development-and-cicd-security","title":"Development and CI/CD Security","text":"<ul> <li>[ ] Implement secure development lifecycle practices</li> <li>[ ] Set up code scanning for vulnerabilities</li> <li>[ ] Configure secret scanning in code repositories</li> <li>[ ] Implement secure CI/CD pipelines</li> <li>[ ] Set up separate environments for development, testing, and production</li> <li>[ ] Implement approval gates for production deployments</li> <li>[ ] Configure automated security testing in pipelines</li> <li>[ ] Use Infrastructure as Code with security best practices</li> <li>[ ] Implement regular security training for developers</li> </ul>"},{"location":"reference/security-checklist/#serverless-sql-security","title":"Serverless SQL Security","text":"<ul> <li>[ ] Configure appropriate access controls on storage accounts</li> <li>[ ] Set up managed identities for storage access</li> <li>[ ] Implement column-level security for external tables</li> <li>[ ] Configure row-level security policies</li> <li>[ ] Limit query concurrency and resource usage</li> <li>[ ] Implement proper database-scoped credentials</li> <li>[ ] Set up secure external data sources</li> <li>[ ] Review and limit data exfiltration risks</li> </ul>"},{"location":"reference/security-checklist/#spark-pool-security","title":"Spark Pool Security","text":"<ul> <li>[ ] Implement proper access control for notebook access</li> <li>[ ] Configure secret scopes for sensitive information</li> <li>[ ] Set up package security for third-party libraries</li> <li>[ ] Isolate development, test, and production environments</li> <li>[ ] Configure proper IAM roles for Spark pools</li> <li>[ ] Implement node initialization scripts with security hardening</li> <li>[ ] Configure proper network isolation for Spark pools</li> <li>[ ] Audit all package installations and dependencies</li> </ul>"},{"location":"reference/security-checklist/#regular-maintenance","title":"Regular Maintenance","text":"<ul> <li>[ ] Schedule regular security reviews</li> <li>[ ] Implement automated vulnerability scanning</li> <li>[ ] Set up regular penetration testing</li> <li>[ ] Schedule key and secret rotation</li> <li>[ ] Perform regular access reviews</li> <li>[ ] Update policies as security requirements change</li> <li>[ ] Conduct regular security training for all users</li> <li>[ ] Test disaster recovery procedures with security focus</li> </ul>"},{"location":"reference/security-checklist/#additional-resources","title":"Additional Resources","text":"<ul> <li>Azure Synapse Analytics Security White Paper</li> <li>Microsoft Security Best Practices</li> <li>Synapse Analytics Security Best Practices</li> </ul>"},{"location":"reference/security/","title":"Azure Synapse Analytics Security Reference","text":"<p>Home &gt; Reference &gt; Security Guide</p>"},{"location":"reference/security/#overview","title":"Overview","text":"<p>This document provides comprehensive security guidance for Azure Synapse Analytics, covering key security aspects across various compute engines and data layers.</p>"},{"location":"reference/security/#network-security","title":"Network Security","text":""},{"location":"reference/security/#network-isolation","title":"Network Isolation","text":"<ul> <li>Use private endpoints to ensure data flows through Azure backbone network</li> <li>Configure managed virtual networks for Synapse workspaces</li> <li>Use IP firewall rules to restrict access</li> <li>Enable service endpoints for added protection</li> </ul>"},{"location":"reference/security/#connectivity","title":"Connectivity","text":"<pre><code>graph TD\n    Client[Client] -- Private Link --&gt; PE[Private Endpoint]\n    PE --&gt; Synapse[Synapse Workspace]\n    Synapse -- Private Link --&gt; Storage[Azure Storage]\n    Synapse -- Private Link --&gt; KeyVault[Azure Key Vault]\n</code></pre>"},{"location":"reference/security/#authentication-and-authorization","title":"Authentication and Authorization","text":""},{"location":"reference/security/#authentication-methods","title":"Authentication Methods","text":"<ul> <li>Microsoft Entra ID (formerly Azure AD) integration</li> <li>Multi-factor authentication</li> <li>Managed identities for Azure resources</li> <li>Service principals with limited scopes</li> </ul>"},{"location":"reference/security/#role-based-access-control-rbac","title":"Role-Based Access Control (RBAC)","text":"<ul> <li>Synapse RBAC roles:</li> <li>Synapse Administrator</li> <li>Synapse Contributor</li> <li>Synapse Compute Operator</li> <li>Synapse Artifact Publisher</li> <li>Synapse Artifact User</li> <li>Azure RBAC roles integration</li> <li>Custom role definitions</li> </ul>"},{"location":"reference/security/#data-protection","title":"Data Protection","text":""},{"location":"reference/security/#encryption","title":"Encryption","text":"<ul> <li>Encryption at rest (storage level)</li> <li>Encryption in transit (TLS 1.2+)</li> <li>Customer-managed keys integration</li> <li>Double encryption support</li> </ul>"},{"location":"reference/security/#data-access-controls","title":"Data Access Controls","text":"<ul> <li>Column-level security</li> <li>Row-level security</li> <li>Dynamic data masking</li> <li>Azure Purview integration for data governance</li> </ul>"},{"location":"reference/security/#monitoring-and-auditing","title":"Monitoring and Auditing","text":""},{"location":"reference/security/#audit-logging","title":"Audit Logging","text":"<ul> <li>Integrate with Azure Monitor</li> <li>Workspace diagnostic logging</li> <li>SQL audit logging</li> <li>Apache Spark application logs</li> </ul>"},{"location":"reference/security/#security-alerts","title":"Security Alerts","text":"<ul> <li>Azure Defender for SQL</li> <li>Microsoft Sentinel integration</li> <li>Anomaly detection</li> <li>Threat protection</li> </ul>"},{"location":"reference/security/#best-practices","title":"Best Practices","text":""},{"location":"reference/security/#serverless-sql-pool-security","title":"Serverless SQL Pool Security","text":"<ul> <li>Implement proper access controls on underlying storage</li> <li>Use managed identities for storage access</li> <li>Apply appropriate RBAC permissions</li> <li>Enable diagnostic logging</li> </ul>"},{"location":"reference/security/#spark-pool-security","title":"Spark Pool Security","text":"<ul> <li>Configure secure access to notebooks</li> <li>Use secret scopes for sensitive information</li> <li>Isolate development, test, and production workspaces</li> <li>Implement proper package management</li> </ul>"},{"location":"reference/security/#shared-metadata-security","title":"Shared Metadata Security","text":"<ul> <li>Control database and table permissions</li> <li>Implement column-level security for sensitive data</li> <li>Use row-level security for multi-tenant scenarios</li> <li>Regularly audit security permissions</li> </ul>"},{"location":"reference/security/#code-examples","title":"Code Examples","text":""},{"location":"reference/security/#configuring-column-level-security","title":"Configuring Column-Level Security","text":"<pre><code>-- Create users\nCREATE USER DataAnalyst WITHOUT LOGIN;\nCREATE USER DataScientist WITHOUT LOGIN;\n\n-- Grant access to the table\nGRANT SELECT ON SalesData TO DataAnalyst, DataScientist;\n\n-- Deny access to sensitive columns for DataAnalyst\nDENY SELECT ON SalesData(CustomerEmail, CreditCardNumber) TO DataAnalyst;\n</code></pre>"},{"location":"reference/security/#implementing-row-level-security","title":"Implementing Row-Level Security","text":"<pre><code>-- Create security predicate function\nCREATE FUNCTION dbo.fn_securitypredicate(@Region AS VARCHAR(100))\nRETURNS TABLE\nWITH SCHEMABINDING\nAS\nRETURN SELECT 1 AS fn_result \n       WHERE @Region = 'North America' \n       OR USER_NAME() = 'dbo'\n       OR USER_NAME() = 'GlobalAnalyst';\n\n-- Create security policy\nCREATE SECURITY POLICY RegionalDataFilter\nADD FILTER PREDICATE dbo.fn_securitypredicate(Region) \nON dbo.SalesData;\n</code></pre>"},{"location":"reference/security/#setting-up-dynamic-data-masking","title":"Setting Up Dynamic Data Masking","text":"<pre><code>-- Apply masking to sensitive columns\nALTER TABLE dbo.Customers\nALTER COLUMN Email ADD MASKED WITH (FUNCTION = 'email()');\n\nALTER TABLE dbo.Customers\nALTER COLUMN PhoneNumber ADD MASKED WITH (FUNCTION = 'partial(0,\"XXX-XXX-\",4)');\n\nALTER TABLE dbo.CreditCards\nALTER COLUMN CardNumber ADD MASKED WITH (FUNCTION = 'partial(0,\"XXXX-XXXX-XXXX-\",4)');\n</code></pre>"},{"location":"reference/security/#next-steps","title":"Next Steps","text":"<ol> <li>Azure Synapse Analytics Best Practices</li> <li>Shared Metadata Security</li> <li>Complete Security Checklist</li> </ol>"},{"location":"serverless-sql/","title":"Serverless SQL Architecture","text":""},{"location":"serverless-sql/#overview","title":"Overview","text":"<p>Serverless SQL is a key component of Azure Synapse Analytics that provides on-demand, scalable SQL query capabilities over data stored in Azure Data Lake Storage. This architecture pattern enables organizations to implement a cost-effective analytics solution without provisioning or managing infrastructure.</p>"},{"location":"serverless-sql/#architecture-components","title":"Architecture Components","text":""},{"location":"serverless-sql/#core-components","title":"Core Components","text":"<ol> <li>Azure Data Lake Storage Gen2</li> <li>Primary storage for data in various formats (Parquet, CSV, JSON)</li> <li>Hierarchical namespace for efficient organization</li> <li> <p>Integration with Azure AD for security</p> </li> <li> <p>Azure Synapse Serverless SQL Pool</p> </li> <li>On-demand query service with pay-per-query billing</li> <li>T-SQL interface for data exploration and analysis</li> <li>No infrastructure to provision or manage</li> <li> <p>Automatic scaling based on query complexity</p> </li> <li> <p>Data Virtualization Layer</p> </li> <li>External tables and views for logical data organization</li> <li>Schema-on-read capabilities</li> <li> <p>Support for various file formats and compression types</p> </li> <li> <p>Integration Components</p> </li> <li>Power BI for reporting and visualization</li> <li>Azure Synapse Pipelines for orchestration</li> <li>Azure Purview for data governance</li> </ol>"},{"location":"serverless-sql/#implementation-patterns","title":"Implementation Patterns","text":""},{"location":"serverless-sql/#data-lake-query-optimization","title":"Data Lake Query Optimization","text":"<p>Serverless SQL pools perform best with optimized data formats and organization:</p>"},{"location":"serverless-sql/#file-format-hierarchy-best-to-worst","title":"File Format Hierarchy (Best to Worst)","text":"<ol> <li>Parquet</li> <li>Columnar format with compression</li> <li>Support for predicate pushdown</li> <li> <p>Partition elimination capabilities</p> </li> <li> <p>ORC</p> </li> <li>Similar benefits to Parquet</li> <li> <p>Good compression ratio</p> </li> <li> <p>CSV/TSV with Header</p> </li> <li>Row-based format</li> <li>Moderate performance</li> <li> <p>Good for small datasets</p> </li> <li> <p>JSON</p> </li> <li>Flexible schema</li> <li>Lower performance</li> <li>Higher compute costs</li> </ol>"},{"location":"serverless-sql/#partitioning-strategies","title":"Partitioning Strategies","text":"<pre><code>-- Example of querying a partitioned dataset efficiently\nSELECT *\nFROM OPENROWSET(\n    BULK 'https://mydatalake.blob.core.windows.net/data/sales/year=2023/month=08/*.parquet',\n    FORMAT = 'PARQUET'\n) AS [sales]\nWHERE [region] = 'West';\n</code></pre>"},{"location":"serverless-sql/#schema-inference-and-management","title":"Schema Inference and Management","text":""},{"location":"serverless-sql/#automatic-schema-inference","title":"Automatic Schema Inference","text":"<pre><code>SELECT TOP 100 *\nFROM OPENROWSET(\n    BULK 'https://mydatalake.blob.core.windows.net/data/products/*.parquet',\n    FORMAT = 'PARQUET'\n) WITH (\n    AUTODETECT = TRUE\n) AS [products];\n</code></pre>"},{"location":"serverless-sql/#explicit-schema-definition","title":"Explicit Schema Definition","text":"<pre><code>CREATE EXTERNAL TABLE [dbo].[Sales] (\n    [OrderId] INT,\n    [CustomerId] INT,\n    [ProductId] INT,\n    [Quantity] INT,\n    [Price] DECIMAL(10,2),\n    [OrderDate] DATETIME2\n)\nWITH (\n    LOCATION = '/sales/',\n    DATA_SOURCE = [MyDataLake],\n    FILE_FORMAT = [ParquetFormat]\n);\n</code></pre>"},{"location":"serverless-sql/#performance-best-practices","title":"Performance Best Practices","text":"<ol> <li>Use Parquet Format</li> <li>Columnar storage for efficient reads</li> <li>Compression to reduce data size</li> <li> <p>Statistics for query optimization</p> </li> <li> <p>Implement Effective Partitioning</p> </li> <li>Partition by frequently filtered columns</li> <li>Balance partition size (100MB-1GB ideal)</li> <li> <p>Avoid over-partitioning</p> </li> <li> <p>Optimize File Sizes</p> </li> <li>Target file sizes between 100MB-1GB</li> <li>Avoid small files (&lt;100MB)</li> <li> <p>Implement file compaction as needed</p> </li> <li> <p>Use Query Optimization Techniques</p> </li> <li>Leverage predicate pushdown</li> <li>Apply column pruning</li> <li>Utilize statistics for better execution plans</li> </ol>"},{"location":"serverless-sql/#cost-management","title":"Cost Management","text":"<p>Serverless SQL pools use a consumption-based pricing model:</p> <ol> <li>Query Costs</li> <li>Billed per TB of data processed</li> <li>No charges for failed queries</li> <li> <p>Metadata operations are free</p> </li> <li> <p>Cost Optimization Strategies</p> </li> <li>Limit data scanned with partitioning</li> <li>Use columnar formats to reduce I/O</li> <li>Apply query filters early</li> <li>Set query result caching where appropriate</li> </ol>"},{"location":"serverless-sql/#security-implementation","title":"Security Implementation","text":"<ol> <li>Authentication</li> <li>Azure Active Directory integration</li> <li> <p>Managed identities for service-to-service authentication</p> </li> <li> <p>Authorization</p> </li> <li>Row-Level Security for data filtering</li> <li>Column-Level Security for sensitive data</li> <li> <p>Dynamic data masking for PII</p> </li> <li> <p>Data Protection</p> </li> <li>In-transit encryption with TLS</li> <li>At-rest encryption with Azure Storage encryption</li> </ol>"},{"location":"serverless-sql/#integration-scenarios","title":"Integration Scenarios","text":""},{"location":"serverless-sql/#business-intelligence-integration","title":"Business Intelligence Integration","text":"<p>Serverless SQL pools integrate seamlessly with Power BI for analytics:</p> <ol> <li>DirectQuery Mode</li> <li>Real-time querying of data lake</li> <li>No need to import data</li> <li> <p>Pushdown query processing</p> </li> <li> <p>Import Mode</p> </li> <li>Scheduled data refresh</li> <li>In-memory analytics</li> <li>Disconnected reporting</li> </ol>"},{"location":"serverless-sql/#data-virtualization","title":"Data Virtualization","text":"<p>Create logical data warehouse views over your data lake:</p> <pre><code>CREATE VIEW [dbo].[CustomerSalesAnalysis] AS\nSELECT \n    c.[CustomerId],\n    c.[CustomerName],\n    c.[Region],\n    s.[OrderId],\n    s.[ProductId],\n    s.[Quantity],\n    s.[Price],\n    s.[OrderDate]\nFROM [dbo].[Customers] c\nJOIN [dbo].[Sales] s ON c.[CustomerId] = s.[CustomerId];\n</code></pre>"},{"location":"serverless-sql/#deployment-and-devops","title":"Deployment and DevOps","text":"<ol> <li>Infrastructure as Code</li> <li>ARM templates for workspace configuration</li> <li> <p>Terraform for resource provisioning</p> </li> <li> <p>CI/CD for Database Objects</p> </li> <li>Source control for SQL scripts</li> <li>Automated testing for views and procedures</li> <li>Deployment pipelines for schema changes</li> </ol>"},{"location":"serverless-sql/#monitoring-and-management","title":"Monitoring and Management","text":"<ol> <li>Query Monitoring</li> <li>Dynamic Management Views (DMVs) for query insights</li> <li>Azure Monitor integration</li> <li> <p>Query Store for performance tracking</p> </li> <li> <p>Resource Governance</p> </li> <li>Query timeout configuration</li> <li>Workload management through classifications</li> <li>Request importance settings</li> </ol>"},{"location":"serverless-sql/#common-use-cases","title":"Common Use Cases","text":"<ol> <li>Data Lake Exploration</li> <li>Ad-hoc querying of raw and refined data</li> <li> <p>Schema discovery and profiling</p> </li> <li> <p>Self-Service Analytics</p> </li> <li>Business analyst access to data lake</li> <li> <p>SQL-based data exploration</p> </li> <li> <p>Data Science Support</p> </li> <li>Feature engineering with SQL</li> <li>Training data preparation</li> <li> <p>Model inference data processing</p> </li> <li> <p>Log Analytics</p> </li> <li>Query across application logs</li> <li>Security and compliance monitoring</li> <li>Operational analytics</li> </ol>"},{"location":"shared-metadata/","title":"Shared Metadata Architecture","text":""},{"location":"shared-metadata/#overview","title":"Overview","text":"<p>The Shared Metadata Architecture in Azure Synapse Analytics enables a unified semantic layer across different compute engines, allowing consistent data access, governance, and business logic implementation regardless of the query engine used. This approach reduces redundancy, improves maintainability, and provides a consistent view of enterprise data.</p>"},{"location":"shared-metadata/#architecture-components","title":"Architecture Components","text":""},{"location":"shared-metadata/#core-components","title":"Core Components","text":"<ol> <li>Azure Synapse Analytics Workspace</li> <li>Central hub for all analytics activities</li> <li>Integration point for different compute engines</li> <li> <p>Management of shared metadata artifacts</p> </li> <li> <p>Synapse SQL Pools (Dedicated and Serverless)</p> </li> <li>T-SQL interface for data access</li> <li>Support for external tables over data lake</li> <li> <p>View definitions for logical data modeling</p> </li> <li> <p>Synapse Spark Pools</p> </li> <li>Apache Spark processing engine</li> <li>Support for Delta, Parquet, and other formats</li> <li> <p>Integration with SQL through SparkSQL</p> </li> <li> <p>Azure Data Lake Storage Gen2</p> </li> <li>Common storage layer for all data</li> <li>Support for POSIX-compliant ACLs</li> <li> <p>Hierarchical namespace for organization</p> </li> <li> <p>Metadata Services</p> </li> <li>Synapse Workspace Metadata</li> <li>Azure Purview for cataloging and lineage</li> <li>Git integration for metadata version control</li> </ol>"},{"location":"shared-metadata/#implementation-patterns","title":"Implementation Patterns","text":""},{"location":"shared-metadata/#cross-engine-table-definitions","title":"Cross-Engine Table Definitions","text":""},{"location":"shared-metadata/#sql-external-tables","title":"SQL External Tables","text":"<pre><code>-- Create a database scoped credential for accessing ADLS\nCREATE DATABASE SCOPED CREDENTIAL [ADLSCredential]\nWITH\n    IDENTITY = 'Managed Service Identity';\n\n-- Create an external data source\nCREATE EXTERNAL DATA SOURCE [DataLake]\nWITH (\n    LOCATION = 'abfss://data@youraccount.dfs.core.windows.net',\n    CREDENTIAL = [ADLSCredential]\n);\n\n-- Create an external file format\nCREATE EXTERNAL FILE FORMAT [ParquetFormat]\nWITH (\n    FORMAT_TYPE = PARQUET,\n    DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'\n);\n\n-- Create an external table\nCREATE EXTERNAL TABLE [dbo].[Customer] (\n    [CustomerId] INT,\n    [Name] NVARCHAR(100),\n    [Email] NVARCHAR(100),\n    [RegistrationDate] DATETIME2\n)\nWITH (\n    LOCATION = '/curated/customers/',\n    DATA_SOURCE = [DataLake],\n    FILE_FORMAT = [ParquetFormat]\n);\n</code></pre>"},{"location":"shared-metadata/#spark-dataframe-access","title":"Spark DataFrame Access","text":"<pre><code># Access the same table from Spark\ndf = spark.read.format(\"delta\").load(\"abfss://data@youraccount.dfs.core.windows.net/curated/customers/\")\n\n# Register as a temp view for SparkSQL access\ndf.createOrReplaceTempView(\"Customer\")\n\n# Query using SparkSQL\nsparkDF = spark.sql(\"SELECT CustomerId, Name, Email FROM Customer WHERE RegistrationDate &gt; '2023-01-01'\")\n</code></pre>"},{"location":"shared-metadata/#unified-semantic-layer","title":"Unified Semantic Layer","text":""},{"location":"shared-metadata/#sql-views-for-business-logic","title":"SQL Views for Business Logic","text":"<pre><code>-- Create a business view that can be accessed from multiple engines\nCREATE VIEW [dbo].[CustomerSummary] AS\nSELECT\n    c.[CustomerId],\n    c.[Name],\n    c.[Email],\n    c.[RegistrationDate],\n    COUNT(o.[OrderId]) AS [TotalOrders],\n    SUM(o.[OrderAmount]) AS [TotalSpend],\n    DATEDIFF(day, c.[RegistrationDate], GETDATE()) AS [CustomerAgeInDays]\nFROM [dbo].[Customer] c\nLEFT JOIN [dbo].[Order] o ON c.[CustomerId] = o.[CustomerId]\nGROUP BY c.[CustomerId], c.[Name], c.[Email], c.[RegistrationDate];\n</code></pre>"},{"location":"shared-metadata/#spark-to-sql-view-access","title":"Spark to SQL View Access","text":"<pre><code># Access SQL views from Spark using JDBC connector\nserver_name = \"mysynapseworkspace-ondemand.sql.azuresynapse.net\"\ndatabase_name = \"MetadataDB\"\n\ncustomer_summary = spark.read \\\n    .format(\"com.microsoft.sqlserver.jdbc.spark\") \\\n    .option(\"url\", f\"jdbc:sqlserver://{server_name}:1433;database={database_name}\") \\\n    .option(\"query\", \"SELECT * FROM [dbo].[CustomerSummary]\") \\\n    .option(\"authentication\", \"ActiveDirectoryMSI\") \\\n    .option(\"encrypt\", \"true\") \\\n    .option(\"trustServerCertificate\", \"false\") \\\n    .load()\n</code></pre>"},{"location":"shared-metadata/#metadata-synchronization-patterns","title":"Metadata Synchronization Patterns","text":""},{"location":"shared-metadata/#schema-propagation","title":"Schema Propagation","text":"<ol> <li>Source of Truth Approach</li> <li>Designate one system (typically SQL) as the schema authority</li> <li>Automate schema propagation to other engines</li> <li> <p>Use tools like Azure Data Factory or Synapse Pipelines for orchestration</p> </li> <li> <p>Schema Evolution Handling</p> </li> <li>Implement version control for schema changes</li> <li>Use schema compatibility modes in Delta Lake</li> <li>Automate testing of schema compatibility</li> </ol>"},{"location":"shared-metadata/#metadata-management","title":"Metadata Management","text":"<ol> <li>Azure Purview Integration</li> <li>Central catalog for data assets</li> <li>Automated scanning and classification</li> <li>Lineage tracking across engines</li> <li> <p>Business glossary integration</p> </li> <li> <p>Custom Metadata Registry</p> </li> <li>Create a metadata registry database</li> <li>Track schema versions and changes</li> <li>Store engine-specific optimizations</li> </ol>"},{"location":"shared-metadata/#security-implementation","title":"Security Implementation","text":""},{"location":"shared-metadata/#unified-security-model","title":"Unified Security Model","text":"<pre><code>-- Implement Row-Level Security\nCREATE SECURITY POLICY [CustomerPolicy]\nADD FILTER PREDICATE [dbo].[fn_securitypredicate]([TenantId])\nON [dbo].[Customer];\n\n-- Column-Level Security\nGRANT SELECT ON [dbo].[Customer]([CustomerId], [Name]) TO [Analysts];\nGRANT SELECT ON [dbo].[Customer]([Email]) TO [MarketingTeam];\n</code></pre>"},{"location":"shared-metadata/#synapse-workspace-permissions","title":"Synapse Workspace Permissions","text":"<ul> <li>Workspace-level roles (Admin, Contributor, User)</li> <li>SQL permissions for database objects</li> <li>Spark pool permissions for notebooks and jobs</li> <li>Integration runtime permissions for pipelines</li> </ul>"},{"location":"shared-metadata/#performance-optimization","title":"Performance Optimization","text":""},{"location":"shared-metadata/#cross-engine-query-optimization","title":"Cross-Engine Query Optimization","text":"<ol> <li>Dedicated SQL Pool Optimizations</li> <li>Distribution keys aligned with join columns</li> <li>Partition aligned with filtering patterns</li> <li> <p>Statistics maintenance</p> </li> <li> <p>Serverless SQL Optimizations</p> </li> <li>Optimal file formats (Parquet/Delta)</li> <li>Partition elimination strategies</li> <li> <p>File size optimization</p> </li> <li> <p>Spark Optimizations</p> </li> <li>Spark configuration tuning</li> <li>Broadcast joins for dimension tables</li> <li>Partition pruning through predicate pushdown</li> </ol>"},{"location":"shared-metadata/#common-use-cases","title":"Common Use Cases","text":""},{"location":"shared-metadata/#enterprise-data-warehouse-modernization","title":"Enterprise Data Warehouse Modernization","text":"<ol> <li>Hybrid Approach</li> <li>Keep core EDW workloads in Dedicated SQL Pool</li> <li>Use Spark for data preparation and ML</li> <li>Use Serverless SQL for ad-hoc exploration</li> <li> <p>Maintain consistent business definitions across all engines</p> </li> <li> <p>Phased Migration</p> </li> <li>Start with shared metadata layer</li> <li>Gradually migrate workloads to appropriate engines</li> <li>Maintain backward compatibility</li> </ol>"},{"location":"shared-metadata/#advanced-analytics-integration","title":"Advanced Analytics Integration","text":"<ol> <li>Machine Learning Pipeline</li> <li>Feature engineering in SQL or Spark</li> <li>Model training in Spark</li> <li>Model scoring in SQL or Spark</li> <li> <p>Consistent data access across pipeline stages</p> </li> <li> <p>Real-time Analytics</p> </li> <li>Stream processing in Spark</li> <li>Serving layer in SQL</li> <li>Shared schema definitions</li> </ol>"},{"location":"shared-metadata/#devops-and-governance","title":"DevOps and Governance","text":"<ol> <li>CI/CD for Metadata</li> <li>Source control for all metadata definitions</li> <li>Automated testing for cross-engine compatibility</li> <li> <p>Deployment pipelines for metadata changes</p> </li> <li> <p>Monitoring and Observability</p> </li> <li>Track query performance across engines</li> <li>Monitor metadata usage patterns</li> <li>Audit access to sensitive data</li> </ol>"},{"location":"shared-metadata/#best-practices","title":"Best Practices","text":"<ol> <li>Design for Compatibility</li> <li>Use data types supported across engines</li> <li>Avoid engine-specific SQL extensions where possible</li> <li> <p>Document engine-specific behaviors</p> </li> <li> <p>Implement Data Governance Early</p> </li> <li>Define data ownership and stewardship</li> <li>Establish metadata management practices</li> <li> <p>Automate compliance and quality checks</p> </li> <li> <p>Balance Flexibility and Control</p> </li> <li>Allow specialized optimizations per engine</li> <li>Maintain core business logic consistency</li> <li> <p>Enable self-service while ensuring governance</p> </li> <li> <p>Optimize for Performance</p> </li> <li>Profile workloads across engines</li> <li>Apply engine-specific optimizations</li> <li>Use appropriate compute for each workload type</li> </ol>"}]}